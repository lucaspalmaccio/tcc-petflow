{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../../core/services/auth.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction LoginComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵtext(1, \" O e-mail \\u00E9 obrigat\\u00F3rio. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵtext(1, \" Formato de e-mail inv\\u00E1lido. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵtext(1, \" A senha \\u00E9 obrigat\\u00F3ria. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.errorMessage, \" \");\n  }\n}\nexport class LoginComponent {\n  constructor(fb, authService, router) {\n    this.fb = fb;\n    this.authService = authService;\n    this.router = router;\n    this.errorMessage = null;\n    this.isLoading = false;\n    // Inicializa o formulário reativo\n    this.loginForm = this.fb.group({\n      // UC01 [117]: \"O usuário informa seu e-mail e senha\"\n      // Validação baseada no Fluxo de Exceção [122]: \"Campos Vazios\"\n      email: ['', [Validators.required, Validators.email]],\n      senha: ['', [Validators.required]]\n    });\n  }\n  ngOnInit() {\n    // Se o usuário já estiver logado (ex: acessou /login manualmente)\n    // o redireciona para a rota correta baseada no perfil.\n    if (this.authService.isAuthenticated()) {\n      const role = this.authService.getUserRole();\n      if (role === 'ROLE_ADMIN') {\n        this.router.navigate(['/admin']);\n      } else if (role === 'ROLE_CLIENTE') {\n        this.router.navigate(['/cliente']);\n      }\n    }\n  }\n  /**\n   * Chamado quando o formulário é enviado.\n   * UC01 [118]: \"O usuário aciona a opção 'Entrar'.\"\n   */\n  onSubmit() {\n    if (this.loginForm.invalid) {\n      this.errorMessage = \"Por favor, preencha o e-mail e a senha.\";\n      return;\n    }\n    this.isLoading = true;\n    this.errorMessage = null;\n    const {\n      email,\n      senha\n    } = this.loginForm.value;\n    // Chama o serviço de autenticação\n    this.authService.login(email, senha).subscribe({\n      next: response => {\n        this.isLoading = false;\n        if (response) {\n          // UC01 Pós-condição (Sucesso) [115]\n          // Redireciona com base no perfil retornado pela API\n          if (response.userRole === 'ROLE_ADMIN') {\n            this.router.navigate(['/admin']);\n          } else if (response.userRole === 'ROLE_CLIENTE') {\n            this.router.navigate(['/cliente']);\n          } else {\n            // Perfil desconhecido (não deveria acontecer)\n            this.errorMessage = \"Perfil de usuário inválido.\";\n            this.authService.logout();\n          }\n        } else {\n          // UC01 Fluxo de Exceção [123]: \"Credenciais Inválidas\"\n          this.errorMessage = \"E-mail ou senha inválidos.\";\n        }\n      },\n      error: err => {\n        // Erro de rede ou servidor fora do ar\n        this.isLoading = false;\n        this.errorMessage = \"Erro ao tentar conectar. Tente novamente.\";\n      }\n    });\n  }\n  static {\n    this.ɵfac = function LoginComponent_Factory(t) {\n      return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.Router));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: LoginComponent,\n      selectors: [[\"app-login\"]],\n      decls: 21,\n      vars: 7,\n      consts: [[1, \"login-container\"], [1, \"login-box\"], [1, \"login-title\"], [1, \"login-subtitle\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"email\", 1, \"form-label\"], [\"type\", \"email\", \"id\", \"email\", \"formControlName\", \"email\", \"placeholder\", \"admin@petflow.com.br\", 1, \"form-control\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"for\", \"senha\", 1, \"form-label\"], [\"type\", \"password\", \"id\", \"senha\", \"formControlName\", \"senha\", \"placeholder\", \"\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\", 1, \"form-control\"], [\"class\", \"error-message\", 4, \"ngIf\"], [\"type\", \"submit\", 1, \"btn-primary\", \"login-button\", 3, \"disabled\"], [1, \"text-danger\"], [1, \"error-message\"]],\n      template: function LoginComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h1\", 2);\n          i0.ɵɵtext(3, \"Petflow\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"p\", 3);\n          i0.ɵɵtext(5, \"Acesso ao Painel Administrativo\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"form\", 4);\n          i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_6_listener() {\n            return ctx.onSubmit();\n          });\n          i0.ɵɵelementStart(7, \"div\", 5)(8, \"label\", 6);\n          i0.ɵɵtext(9, \"E-mail\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(10, \"input\", 7);\n          i0.ɵɵtemplate(11, LoginComponent_div_11_Template, 2, 0, \"div\", 8);\n          i0.ɵɵtemplate(12, LoginComponent_div_12_Template, 2, 0, \"div\", 8);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(13, \"div\", 5)(14, \"label\", 9);\n          i0.ɵɵtext(15, \"Senha\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(16, \"input\", 10);\n          i0.ɵɵtemplate(17, LoginComponent_div_17_Template, 2, 0, \"div\", 8);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(18, LoginComponent_div_18_Template, 2, 1, \"div\", 11);\n          i0.ɵɵelementStart(19, \"button\", 12);\n          i0.ɵɵtext(20);\n          i0.ɵɵelementEnd()()()();\n        }\n        if (rf & 2) {\n          let tmp_1_0;\n          let tmp_2_0;\n          let tmp_3_0;\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", ((tmp_1_0 = ctx.loginForm.get(\"email\")) == null ? null : tmp_1_0.touched) && ((tmp_1_0 = ctx.loginForm.get(\"email\")) == null ? null : tmp_1_0.hasError(\"required\")));\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx.loginForm.get(\"email\")) == null ? null : tmp_2_0.touched) && ((tmp_2_0 = ctx.loginForm.get(\"email\")) == null ? null : tmp_2_0.hasError(\"email\")));\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", ((tmp_3_0 = ctx.loginForm.get(\"senha\")) == null ? null : tmp_3_0.touched) && ((tmp_3_0 = ctx.loginForm.get(\"senha\")) == null ? null : tmp_3_0.hasError(\"required\")));\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"disabled\", ctx.isLoading || ctx.loginForm.invalid);\n          i0.ɵɵadvance(1);\n          i0.ɵɵtextInterpolate1(\" \", ctx.isLoading ? \"Entrando...\" : \"Entrar\", \" \");\n        }\n      },\n      dependencies: [i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n      styles: [\".login-container[_ngcontent-%COMP%] {\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  min-height: 100vh;\\n  background-color: var(--color-light);\\n}\\n\\n.login-box[_ngcontent-%COMP%] {\\n  width: 100%;\\n  max-width: 400px;\\n  padding: 2.5rem;\\n  background-color: var(--color-white);\\n  border-radius: 8px;\\n  box-shadow: var(--shadow-md);\\n  border-top: 4px solid var(--color-primary);\\n}\\n\\n.login-title[_ngcontent-%COMP%] {\\n  text-align: center;\\n  font-size: 2.5rem;\\n  font-weight: 700;\\n  color: var(--color-primary);\\n  margin-bottom: 0.5rem;\\n}\\n\\n.login-subtitle[_ngcontent-%COMP%] {\\n  text-align: center;\\n  font-size: 1rem;\\n  color: var(--color-secondary);\\n  margin-bottom: 2rem;\\n}\\n\\n.login-button[_ngcontent-%COMP%] {\\n  width: 100%;\\n  padding: 12px;\\n  font-size: 1.1rem;\\n  margin-top: 1rem;\\n}\\n\\n.login-button[_ngcontent-%COMP%]:disabled {\\n  background-color: var(--color-secondary);\\n  cursor: not-allowed;\\n}\\n\\n.error-message[_ngcontent-%COMP%] {\\n  background-color: #f8d7da;\\n  color: #721c24;\\n  border: 1px solid #f5c6cb;\\n  padding: 0.75rem 1.25rem;\\n  border-radius: 4px;\\n  margin-top: 1rem;\\n  text-align: center;\\n}\\n\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZmVhdHVyZXMvYXV0aC9sb2dpbi9sb2dpbi5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsYUFBYTtFQUNiLG1CQUFtQjtFQUNuQix1QkFBdUI7RUFDdkIsaUJBQWlCO0VBQ2pCLG9DQUFvQztBQUN0Qzs7QUFFQTtFQUNFLFdBQVc7RUFDWCxnQkFBZ0I7RUFDaEIsZUFBZTtFQUNmLG9DQUFvQztFQUNwQyxrQkFBa0I7RUFDbEIsNEJBQTRCO0VBQzVCLDBDQUEwQztBQUM1Qzs7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQixpQkFBaUI7RUFDakIsZ0JBQWdCO0VBQ2hCLDJCQUEyQjtFQUMzQixxQkFBcUI7QUFDdkI7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsZUFBZTtFQUNmLDZCQUE2QjtFQUM3QixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxXQUFXO0VBQ1gsYUFBYTtFQUNiLGlCQUFpQjtFQUNqQixnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSx3Q0FBd0M7RUFDeEMsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UseUJBQXlCO0VBQ3pCLGNBQWM7RUFDZCx5QkFBeUI7RUFDekIsd0JBQXdCO0VBQ3hCLGtCQUFrQjtFQUNsQixnQkFBZ0I7RUFDaEIsa0JBQWtCO0FBQ3BCIiwic291cmNlc0NvbnRlbnQiOlsiLmxvZ2luLWNvbnRhaW5lciB7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gIG1pbi1oZWlnaHQ6IDEwMHZoO1xyXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWNvbG9yLWxpZ2h0KTtcclxufVxyXG5cclxuLmxvZ2luLWJveCB7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgbWF4LXdpZHRoOiA0MDBweDtcclxuICBwYWRkaW5nOiAyLjVyZW07XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tY29sb3Itd2hpdGUpO1xyXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcclxuICBib3gtc2hhZG93OiB2YXIoLS1zaGFkb3ctbWQpO1xyXG4gIGJvcmRlci10b3A6IDRweCBzb2xpZCB2YXIoLS1jb2xvci1wcmltYXJ5KTtcclxufVxyXG5cclxuLmxvZ2luLXRpdGxlIHtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgZm9udC1zaXplOiAyLjVyZW07XHJcbiAgZm9udC13ZWlnaHQ6IDcwMDtcclxuICBjb2xvcjogdmFyKC0tY29sb3ItcHJpbWFyeSk7XHJcbiAgbWFyZ2luLWJvdHRvbTogMC41cmVtO1xyXG59XHJcblxyXG4ubG9naW4tc3VidGl0bGUge1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICBmb250LXNpemU6IDFyZW07XHJcbiAgY29sb3I6IHZhcigtLWNvbG9yLXNlY29uZGFyeSk7XHJcbiAgbWFyZ2luLWJvdHRvbTogMnJlbTtcclxufVxyXG5cclxuLmxvZ2luLWJ1dHRvbiB7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgcGFkZGluZzogMTJweDtcclxuICBmb250LXNpemU6IDEuMXJlbTtcclxuICBtYXJnaW4tdG9wOiAxcmVtO1xyXG59XHJcblxyXG4ubG9naW4tYnV0dG9uOmRpc2FibGVkIHtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1jb2xvci1zZWNvbmRhcnkpO1xyXG4gIGN1cnNvcjogbm90LWFsbG93ZWQ7XHJcbn1cclxuXHJcbi5lcnJvci1tZXNzYWdlIHtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjhkN2RhO1xyXG4gIGNvbG9yOiAjNzIxYzI0O1xyXG4gIGJvcmRlcjogMXB4IHNvbGlkICNmNWM2Y2I7XHJcbiAgcGFkZGluZzogMC43NXJlbSAxLjI1cmVtO1xyXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcclxuICBtYXJnaW4tdG9wOiAxcmVtO1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n    });\n  }\n}","map":{"version":3,"names":["Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","ctx_r3","errorMessage","LoginComponent","constructor","fb","authService","router","isLoading","loginForm","group","email","required","senha","ngOnInit","isAuthenticated","role","getUserRole","navigate","onSubmit","invalid","value","login","subscribe","next","response","userRole","logout","error","err","ɵɵdirectiveInject","i1","FormBuilder","i2","AuthService","i3","Router","selectors","decls","vars","consts","template","LoginComponent_Template","rf","ctx","ɵɵlistener","LoginComponent_Template_form_ngSubmit_6_listener","ɵɵelement","ɵɵtemplate","LoginComponent_div_11_Template","LoginComponent_div_12_Template","LoginComponent_div_17_Template","LoginComponent_div_18_Template","ɵɵproperty","tmp_1_0","get","touched","hasError","tmp_2_0","tmp_3_0"],"sources":["C:\\TCC\\petflow\\petflow-web\\src\\app\\features\\auth\\login\\login.component.ts","C:\\TCC\\petflow\\petflow-web\\src\\app\\features\\auth\\login\\login.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from '../../../core/services/auth.service';\r\n\r\n@Component({\r\nselector: 'app-login',\r\ntemplateUrl: './login.component.html',\r\nstyleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\nloginForm: FormGroup;\r\nerrorMessage: string | null = null;\r\nisLoading = false;\r\n\r\nconstructor(\r\n    private fb: FormBuilder,\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) {\r\n    // Inicializa o formulário reativo\r\n    this.loginForm = this.fb.group({\r\n      // UC01 [117]: \"O usuário informa seu e-mail e senha\"\r\n      // Validação baseada no Fluxo de Exceção [122]: \"Campos Vazios\"\r\n      email: ['', [Validators.required, Validators.email]],\r\n      senha: ['', [Validators.required]]\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // Se o usuário já estiver logado (ex: acessou /login manualmente)\r\n    // o redireciona para a rota correta baseada no perfil.\r\n    if (this.authService.isAuthenticated()) {\r\n      const role = this.authService.getUserRole();\r\n      if (role === 'ROLE_ADMIN') {\r\n        this.router.navigate(['/admin']);\r\n      } else if (role === 'ROLE_CLIENTE') {\r\n        this.router.navigate(['/cliente']);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Chamado quando o formulário é enviado.\r\n   * UC01 [118]: \"O usuário aciona a opção 'Entrar'.\"\r\n   */\r\n  onSubmit(): void {\r\n    if (this.loginForm.invalid) {\r\n      this.errorMessage = \"Por favor, preencha o e-mail e a senha.\";\r\n      return;\r\n    }\r\n\r\n    this.isLoading = true;\r\n    this.errorMessage = null;\r\n\r\n    const { email, senha } = this.loginForm.value;\r\n\r\n    // Chama o serviço de autenticação\r\n    this.authService.login(email, senha).subscribe({\r\n      next: (response) => {\r\n        this.isLoading = false;\r\n        if (response) {\r\n          // UC01 Pós-condição (Sucesso) [115]\r\n          // Redireciona com base no perfil retornado pela API\r\n          if (response.userRole === 'ROLE_ADMIN') {\r\n            this.router.navigate(['/admin']);\r\n          } else if (response.userRole === 'ROLE_CLIENTE') {\r\n            this.router.navigate(['/cliente']);\r\n          } else {\r\n            // Perfil desconhecido (não deveria acontecer)\r\n            this.errorMessage = \"Perfil de usuário inválido.\";\r\n            this.authService.logout();\r\n          }\r\n        } else {\r\n          // UC01 Fluxo de Exceção [123]: \"Credenciais Inválidas\"\r\n          this.errorMessage = \"E-mail ou senha inválidos.\";\r\n        }\r\n      },\r\n      error: (err) => {\r\n        // Erro de rede ou servidor fora do ar\r\n        this.isLoading = false;\r\n        this.errorMessage = \"Erro ao tentar conectar. Tente novamente.\";\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n","<div class=\"login-container\">\r\n    <div class=\"login-box\">\r\n\r\n        <!-- (Você pode adicionar sua logo aqui) -->\r\n        <h1 class=\"login-title\">Petflow</h1>\r\n        <p class=\"login-subtitle\">Acesso ao Painel Administrativo</p>\r\n\r\n        <!-- Formulário de Login (UC01) -->\r\n        <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\r\n\r\n            <!-- Campo E-mail -->\r\n            <div class=\"form-group\">\r\n                <label for=\"email\" class=\"form-label\">E-mail</label>\r\n                <input\r\n                        type=\"email\"\r\n                        id=\"email\"\r\n                        class=\"form-control\"\r\n                        formControlName=\"email\"\r\n                        placeholder=\"admin@petflow.com.br\">\r\n\r\n                <!-- Validação de Campos Vazios [122] -->\r\n                <div *ngIf=\"loginForm.get('email')?.touched && loginForm.get('email')?.hasError('required')\"\r\n                     class=\"text-danger\">\r\n                    O e-mail é obrigatório.\r\n                </div>\r\n                <div *ngIf=\"loginForm.get('email')?.touched && loginForm.get('email')?.hasError('email')\"\r\n                     class=\"text-danger\">\r\n                    Formato de e-mail inválido.\r\n                </div>\r\n            </div>\r\n\r\n            <!-- Campo Senha -->\r\n            <div class=\"form-group\">\r\n                <label for=\"senha\" class=\"form-label\">Senha</label>\r\n                <input\r\n                        type=\"password\"\r\n                        id=\"senha\"\r\n                        class=\"form-control\"\r\n                        formControlName=\"senha\"\r\n                        placeholder=\"••••••••\">\r\n\r\n                <!-- Validação de Campos Vazios [122] -->\r\n                <div *ngIf=\"loginForm.get('senha')?.touched && loginForm.get('senha')?.hasError('required')\"\r\n                     class=\"text-danger\">\r\n                    A senha é obrigatória.\r\n                </div>\r\n            </div>\r\n\r\n            <!-- Mensagem de Erro Geral (Credenciais Inválidas [123]) -->\r\n            <div *ngIf=\"errorMessage\" class=\"error-message\">\r\n                {{ errorMessage }}\r\n            </div>\r\n\r\n            <!-- Botão Entrar -->\r\n            <button\r\n                    type=\"submit\"\r\n                    class=\"btn-primary login-button\"\r\n                    [disabled]=\"isLoading || loginForm.invalid\">\r\n                {{ isLoading ? 'Entrando...' : 'Entrar' }}\r\n            </button>\r\n\r\n        </form>\r\n    </div>\r\n</div>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}