{"ast":null,"code":"import { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nclass AuthInterceptor {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  intercept(request, next) {\n    const token = this.authService.getToken();\n    const isApiUrl = request.url.startsWith(environment.apiUrl);\n    // Se o token existe e a requisição é para a nossa API...\n    if (token && isApiUrl) {\n      // Clona a requisição e adiciona o cabeçalho de autorização\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n    return next.handle(request);\n  }\n  static {\n    this.ɵfac = function AuthInterceptor_Factory(t) {\n      return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthInterceptor,\n      factory: AuthInterceptor.ɵfac\n    });\n  }\n}\nexport { AuthInterceptor };","map":{"version":3,"names":["environment","AuthInterceptor","constructor","authService","intercept","request","next","token","getToken","isApiUrl","url","startsWith","apiUrl","clone","setHeaders","Authorization","handle","i0","ɵɵinject","i1","AuthService","factory","ɵfac"],"sources":["C:\\TCC\\petflow\\petflow-web\\src\\app\\core\\interceptors\\auth.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {\r\nHttpRequest,\r\nHttpHandler,\r\nHttpEvent,\r\nHttpInterceptor\r\n} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from '../services/auth.service';\r\nimport { environment } from '../../../environments/environment';\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n\r\nconstructor(private authService: AuthService) {}\r\n\r\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\r\n    const token = this.authService.getToken();\r\n    const isApiUrl = request.url.startsWith(environment.apiUrl);\r\n\r\n    // Se o token existe e a requisição é para a nossa API...\r\n    if (token && isApiUrl) {\r\n      // Clona a requisição e adiciona o cabeçalho de autorização\r\n      request = request.clone({\r\n        setHeaders: {\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      });\r\n    }\r\n\r\n    return next.handle(request);\r\n  }\r\n}"],"mappings":"AASA,SAASA,WAAW,QAAQ,mCAAmC;;;AAE/D,MACaC,eAAe;EAE5BC,YAAoBC,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;EAAgB;EAE7CC,SAASA,CAACC,OAA6B,EAAEC,IAAiB;IACxD,MAAMC,KAAK,GAAG,IAAI,CAACJ,WAAW,CAACK,QAAQ,EAAE;IACzC,MAAMC,QAAQ,GAAGJ,OAAO,CAACK,GAAG,CAACC,UAAU,CAACX,WAAW,CAACY,MAAM,CAAC;IAE3D;IACA,IAAIL,KAAK,IAAIE,QAAQ,EAAE;MACrB;MACAJ,OAAO,GAAGA,OAAO,CAACQ,KAAK,CAAC;QACtBC,UAAU,EAAE;UACVC,aAAa,EAAE,UAAUR,KAAK;;OAEjC,CAAC;;IAGJ,OAAOD,IAAI,CAACU,MAAM,CAACX,OAAO,CAAC;EAC7B;;;uBAnBWJ,eAAe,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA;IAAA;EAAA;;;aAAfnB,eAAe;MAAAoB,OAAA,EAAfpB,eAAe,CAAAqB;IAAA;EAAA;;SAAfrB,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}