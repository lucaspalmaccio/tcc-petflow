{"ast":null,"code":"import { throwError, tap } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n// Enum de perfis\nexport var Perfil;\n(function (Perfil) {\n  Perfil[\"ADMIN\"] = \"ADMIN\";\n  Perfil[\"CLIENTE\"] = \"CLIENTE\";\n})(Perfil || (Perfil = {}));\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8081/auth';\n  }\n  login(email, senha_normal) {\n    return this.http.post(`${this.apiUrl}/login`, {\n      email,\n      senha_normal\n    }).pipe(tap(response => {\n      if (!response.userRole) {\n        throw new Error('Usuário ou senha inválidos');\n      }\n      this.setSession(response);\n    }), catchError(err => {\n      return throwError(() => new Error('Usuário ou senha inválidos'));\n    }));\n  }\n  setSession(authResponse) {\n    localStorage.setItem('petflow_auth_token', authResponse.token ?? '');\n    // SALVA como string normal, depois vamos converter para enum\n    localStorage.setItem('petflow_user_role', authResponse.userRole ?? '');\n    localStorage.setItem('petflow_user_name', authResponse.userName ?? '');\n    if (authResponse.expiresIn) {\n      const expiresAt = Date.now() + authResponse.expiresIn * 1000;\n      localStorage.setItem('petflow_token_expires', expiresAt.toString());\n    }\n  }\n  getToken() {\n    return localStorage.getItem('petflow_auth_token');\n  }\n  getUserRole() {\n    const role = localStorage.getItem('petflow_user_role');\n    if (!role) return null;\n    // CONVERTE a string do backend para o enum\n    return role === 'ADMIN' ? Perfil.ADMIN : role === 'CLIENTE' ? Perfil.CLIENTE : null;\n  }\n  isAuthenticated() {\n    const token = this.getToken();\n    const expires = localStorage.getItem('petflow_token_expires');\n    if (!token) return false;\n    if (expires && Date.now() > Number(expires)) return false;\n    return true;\n  }\n  logout() {\n    localStorage.clear();\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["throwError","tap","catchError","Perfil","AuthService","constructor","http","apiUrl","login","email","senha_normal","post","pipe","response","userRole","Error","setSession","err","authResponse","localStorage","setItem","token","userName","expiresIn","expiresAt","Date","now","toString","getToken","getItem","getUserRole","role","ADMIN","CLIENTE","isAuthenticated","expires","Number","logout","clear","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\TCC\\petflow\\petflow-web\\src\\app\\core\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, throwError, tap } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\n// Enum de perfis\r\nexport enum Perfil {\r\nADMIN = 'ADMIN',\r\nCLIENTE = 'CLIENTE'\r\n}\r\n\r\nexport interface LoginResponse {\r\ntoken: string | null;\r\nexpiresIn: number | null;\r\nuserName: string | null;\r\nuserRole: Perfil | null; // PERFIL do backend\r\n}\r\n\r\n@Injectable({\r\nprovidedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\r\nprivate apiUrl = 'http://localhost:8081/auth';\r\n\r\nconstructor(private http: HttpClient) {}\r\n\r\n  login(email: string, senha_normal: string): Observable<LoginResponse> {\r\n    return this.http.post<LoginResponse>(`${this.apiUrl}/login`, { email, senha_normal }).pipe(\r\n      tap(response => {\r\n        if (!response.userRole) {\r\n          throw new Error('Usuário ou senha inválidos');\r\n        }\r\n        this.setSession(response);\r\n      }),\r\n      catchError(err => {\r\n        return throwError(() => new Error('Usuário ou senha inválidos'));\r\n      })\r\n    );\r\n  }\r\n\r\n  private setSession(authResponse: LoginResponse): void {\r\n    localStorage.setItem('petflow_auth_token', authResponse.token ?? '');\r\n    // SALVA como string normal, depois vamos converter para enum\r\n    localStorage.setItem('petflow_user_role', authResponse.userRole ?? '');\r\n    localStorage.setItem('petflow_user_name', authResponse.userName ?? '');\r\n    if (authResponse.expiresIn) {\r\n      const expiresAt = Date.now() + authResponse.expiresIn * 1000;\r\n      localStorage.setItem('petflow_token_expires', expiresAt.toString());\r\n    }\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return localStorage.getItem('petflow_auth_token');\r\n  }\r\n\r\n  getUserRole(): Perfil | null {\r\n    const role = localStorage.getItem('petflow_user_role');\r\n    if (!role) return null;\r\n    // CONVERTE a string do backend para o enum\r\n    return role === 'ADMIN' ? Perfil.ADMIN : role === 'CLIENTE' ? Perfil.CLIENTE : null;\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    const token = this.getToken();\r\n    const expires = localStorage.getItem('petflow_token_expires');\r\n    if (!token) return false;\r\n    if (expires && Date.now() > Number(expires)) return false;\r\n    return true;\r\n  }\r\n\r\n  logout(): void {\r\n    localStorage.clear();\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAAqBA,UAAU,EAAEC,GAAG,QAAQ,MAAM;AAClD,SAASC,UAAU,QAAQ,gBAAgB;;;AAE3C;AACA,WAAYC,MAGX;AAHD,WAAYA,MAAM;EAClBA,MAAA,mBAAe;EACfA,MAAA,uBAAmB;AACnB,CAAC,EAHWA,MAAM,KAANA,MAAM;AAelB,OAAM,MAAOC,WAAW;EAIxBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,4BAA4B;EAEN;EAErCC,KAAKA,CAACC,KAAa,EAAEC,YAAoB;IACvC,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAgB,GAAG,IAAI,CAACJ,MAAM,QAAQ,EAAE;MAAEE,KAAK;MAAEC;IAAY,CAAE,CAAC,CAACE,IAAI,CACxFX,GAAG,CAACY,QAAQ,IAAG;MACb,IAAI,CAACA,QAAQ,CAACC,QAAQ,EAAE;QACtB,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;;MAE/C,IAAI,CAACC,UAAU,CAACH,QAAQ,CAAC;IAC3B,CAAC,CAAC,EACFX,UAAU,CAACe,GAAG,IAAG;MACf,OAAOjB,UAAU,CAAC,MAAM,IAAIe,KAAK,CAAC,4BAA4B,CAAC,CAAC;IAClE,CAAC,CAAC,CACH;EACH;EAEQC,UAAUA,CAACE,YAA2B;IAC5CC,YAAY,CAACC,OAAO,CAAC,oBAAoB,EAAEF,YAAY,CAACG,KAAK,IAAI,EAAE,CAAC;IACpE;IACAF,YAAY,CAACC,OAAO,CAAC,mBAAmB,EAAEF,YAAY,CAACJ,QAAQ,IAAI,EAAE,CAAC;IACtEK,YAAY,CAACC,OAAO,CAAC,mBAAmB,EAAEF,YAAY,CAACI,QAAQ,IAAI,EAAE,CAAC;IACtE,IAAIJ,YAAY,CAACK,SAAS,EAAE;MAC1B,MAAMC,SAAS,GAAGC,IAAI,CAACC,GAAG,EAAE,GAAGR,YAAY,CAACK,SAAS,GAAG,IAAI;MAC5DJ,YAAY,CAACC,OAAO,CAAC,uBAAuB,EAAEI,SAAS,CAACG,QAAQ,EAAE,CAAC;;EAEvE;EAEAC,QAAQA,CAAA;IACN,OAAOT,YAAY,CAACU,OAAO,CAAC,oBAAoB,CAAC;EACnD;EAEAC,WAAWA,CAAA;IACT,MAAMC,IAAI,GAAGZ,YAAY,CAACU,OAAO,CAAC,mBAAmB,CAAC;IACtD,IAAI,CAACE,IAAI,EAAE,OAAO,IAAI;IACtB;IACA,OAAOA,IAAI,KAAK,OAAO,GAAG5B,MAAM,CAAC6B,KAAK,GAAGD,IAAI,KAAK,SAAS,GAAG5B,MAAM,CAAC8B,OAAO,GAAG,IAAI;EACrF;EAEAC,eAAeA,CAAA;IACb,MAAMb,KAAK,GAAG,IAAI,CAACO,QAAQ,EAAE;IAC7B,MAAMO,OAAO,GAAGhB,YAAY,CAACU,OAAO,CAAC,uBAAuB,CAAC;IAC7D,IAAI,CAACR,KAAK,EAAE,OAAO,KAAK;IACxB,IAAIc,OAAO,IAAIV,IAAI,CAACC,GAAG,EAAE,GAAGU,MAAM,CAACD,OAAO,CAAC,EAAE,OAAO,KAAK;IACzD,OAAO,IAAI;EACb;EAEAE,MAAMA,CAAA;IACJlB,YAAY,CAACmB,KAAK,EAAE;EACtB;;;uBApDWlC,WAAW,EAAAmC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXtC,WAAW;MAAAuC,OAAA,EAAXvC,WAAW,CAAAwC,IAAA;MAAAC,UAAA,EAFZ;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}