{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { formatDate } from '@angular/common';\nlet AgendamentoModalComponent = class AgendamentoModalComponent {\n  constructor(fb, agendamentoService) {\n    this.fb = fb;\n    this.agendamentoService = agendamentoService;\n    this.closeModal = new EventEmitter();\n    this.saveSuccess = new EventEmitter();\n    this.isLoading = false;\n    this.errorMessage = null;\n    this.minDate = ''; // Data mínima para o input datetime-local\n    this.agendamentoForm = this.fb.group({\n      petId: [null, Validators.required],\n      servicoIds: [[], [Validators.required, Validators.minLength(1)]],\n      dataHora: ['', Validators.required]\n    });\n  }\n  ngOnInit() {\n    // Define a data/hora mínima como a data/hora atual\n    // Formato 'yyyy-MM-ddTHH:mm' exigido pelo input datetime-local\n    this.minDate = formatDate(new Date(), 'yyyy-MM-ddTHH:mm', 'en-US');\n  }\n  /**\n   * Salva o novo Agendamento (UC05)\n   */\n  submitForm() {\n    if (this.agendamentoForm.invalid) {\n      this.errorMessage = \"Selecione o pet, pelo menos um serviço e a data/hora.\";\n      // Marca todos os campos como \"touched\" para exibir os erros\n      this.agendamentoForm.markAllAsTouched();\n      return;\n    }\n    this.isLoading = true;\n    this.errorMessage = null;\n    // Ajusta o formato da data/hora antes de enviar para a API\n    const formValue = this.agendamentoForm.value;\n    const dataHoraISO = new Date(formValue.dataHora).toISOString();\n    const dto = {\n      clienteId: null,\n      petId: formValue.petId,\n      dataHora: dataHoraISO,\n      servicoIds: formValue.servicoIds\n    };\n    this.agendamentoService.createAgendamento(dto).subscribe({\n      next: () => {\n        this.isLoading = false;\n        this.saveSuccess.emit(); // Emite o evento de sucesso\n        this.onClose(); // Fecha o modal\n      },\n      error: err => {\n        this.isLoading = false;\n        // CT03.2 - Horário Indisponível\n        this.errorMessage = err.error?.erro || \"Erro ao criar agendamento. Verifique o horário.\";\n      }\n    });\n  }\n  /**\n   * Emite o evento para fechar o modal.\n   */\n  onClose() {\n    this.closeModal.emit();\n  }\n  // --- Helpers para validação no template ---\n  isControlInvalid(controlName) {\n    const control = this.agendamentoForm.get(controlName);\n    return !!control && control.invalid && (control.dirty || control.touched);\n  }\n  hasRequiredError(controlName) {\n    const control = this.agendamentoForm.get(controlName);\n    return !!control && control.hasError('required');\n  }\n  hasMinLengthError(controlName) {\n    const control = this.agendamentoForm.get(controlName);\n    return !!control && control.hasError('minlength');\n  }\n};\n__decorate([Input()], AgendamentoModalComponent.prototype, \"petsCliente$\", void 0);\n__decorate([Input()], AgendamentoModalComponent.prototype, \"servicosDisponiveis$\", void 0);\n__decorate([Output()], AgendamentoModalComponent.prototype, \"closeModal\", void 0);\n__decorate([Output()], AgendamentoModalComponent.prototype, \"saveSuccess\", void 0);\nAgendamentoModalComponent = __decorate([Component({\n  selector: 'app-agendamento-modal',\n  templateUrl: './agendamento-modal.component.html',\n  styleUrls: ['./agendamento-modal.component.css']\n})], AgendamentoModalComponent);\nexport { AgendamentoModalComponent };","map":{"version":3,"names":["Component","EventEmitter","Input","Output","Validators","formatDate","AgendamentoModalComponent","constructor","fb","agendamentoService","closeModal","saveSuccess","isLoading","errorMessage","minDate","agendamentoForm","group","petId","required","servicoIds","minLength","dataHora","ngOnInit","Date","submitForm","invalid","markAllAsTouched","formValue","value","dataHoraISO","toISOString","dto","clienteId","createAgendamento","subscribe","next","emit","onClose","error","err","erro","isControlInvalid","controlName","control","get","dirty","touched","hasRequiredError","hasError","hasMinLengthError","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\TCC\\petflow\\petflow-web\\src\\app\\features\\cliente\\components\\agendamento-modal\\agendamento-modal.component.ts"],"sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\nimport { AgendamentoService } from '../../../admin/services/agendamento.service';\r\nimport { Pet } from '../../../admin/models/pet.model';\r\nimport { Servico } from '../../../admin/models/servico.model';\r\nimport { AgendamentoRequestDTO } from '../../../admin/models/agendamento.model';\r\nimport { formatDate } from '@angular/common';\r\n\r\n@Component({\r\nselector: 'app-agendamento-modal',\r\ntemplateUrl: './agendamento-modal.component.html',\r\nstyleUrls: ['./agendamento-modal.component.css']\r\n})\r\nexport class AgendamentoModalComponent implements OnInit {\r\n// --- Entradas e Saídas ---\r\n@Input() petsCliente$: Observable<Pet[]>;\r\n@Input() servicosDisponiveis$: Observable<Servico[]>;\r\n@Output() closeModal = new EventEmitter<void>();\r\n@Output() saveSuccess = new EventEmitter<void>();\r\n\r\n// --- Estado ---\r\nagendamentoForm: FormGroup;\r\nisLoading = false;\r\nerrorMessage: string | null = null;\r\nminDate: string = ''; // Data mínima para o input datetime-local\r\n\r\nconstructor(\r\n    private fb: FormBuilder,\r\n    private agendamentoService: AgendamentoService\r\n  ) {\r\n    this.agendamentoForm = this.fb.group({\r\n      petId: [null, Validators.required],\r\n      servicoIds: [[], [Validators.required, Validators.minLength(1)]],\r\n      dataHora: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // Define a data/hora mínima como a data/hora atual\r\n    // Formato 'yyyy-MM-ddTHH:mm' exigido pelo input datetime-local\r\n    this.minDate = formatDate(new Date(), 'yyyy-MM-ddTHH:mm', 'en-US');\r\n  }\r\n\r\n  /**\r\n   * Salva o novo Agendamento (UC05)\r\n   */\r\n  submitForm(): void {\r\n    if (this.agendamentoForm.invalid) {\r\n      this.errorMessage = \"Selecione o pet, pelo menos um serviço e a data/hora.\";\r\n      // Marca todos os campos como \"touched\" para exibir os erros\r\n      this.agendamentoForm.markAllAsTouched();\r\n      return;\r\n    }\r\n\r\n    this.isLoading = true;\r\n    this.errorMessage = null;\r\n\r\n    // Ajusta o formato da data/hora antes de enviar para a API\r\n    const formValue = this.agendamentoForm.value;\r\n    const dataHoraISO = new Date(formValue.dataHora).toISOString();\r\n\r\n    const dto: AgendamentoRequestDTO = {\r\n      clienteId: null, // O back-end pega do token\r\n      petId: formValue.petId,\r\n      dataHora: dataHoraISO,\r\n      servicoIds: formValue.servicoIds\r\n    };\r\n\r\n    this.agendamentoService.createAgendamento(dto).subscribe({\r\n      next: () => {\r\n        this.isLoading = false;\r\n        this.saveSuccess.emit(); // Emite o evento de sucesso\r\n        this.onClose();          // Fecha o modal\r\n      },\r\n      error: (err) => {\r\n        this.isLoading = false;\r\n        // CT03.2 - Horário Indisponível\r\n        this.errorMessage = err.error?.erro || \"Erro ao criar agendamento. Verifique o horário.\";\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Emite o evento para fechar o modal.\r\n   */\r\n  onClose(): void {\r\n    this.closeModal.emit();\r\n  }\r\n\r\n  // --- Helpers para validação no template ---\r\n  isControlInvalid(controlName: string): boolean {\r\n    const control = this.agendamentoForm.get(controlName);\r\n    return !!control && control.invalid && (control.dirty || control.touched);\r\n  }\r\n\r\n  hasRequiredError(controlName: string): boolean {\r\n    const control = this.agendamentoForm.get(controlName);\r\n    return !!control && control.hasError('required');\r\n  }\r\n\r\n  hasMinLengthError(controlName: string): boolean {\r\n    const control = this.agendamentoForm.get(controlName);\r\n    return !!control && control.hasError('minlength');\r\n  }\r\n}\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}