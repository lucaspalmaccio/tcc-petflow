{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { Perfil } from '../../../core/services/auth.service';\nexport let LoginComponent = class LoginComponent {\n  constructor(fb, authService, router) {\n    this.fb = fb;\n    this.authService = authService;\n    this.router = router;\n    this.errorMessage = null;\n    this.isLoading = false;\n    this.showPassword = false;\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      senha_normal: ['', [Validators.required]]\n    });\n  }\n  ngOnInit() {\n    const perfil = this.authService.getUserRole();\n    if (this.authService.isAuthenticated() && perfil) {\n      this.redirectUser(perfil);\n    }\n  }\n  onSubmit() {\n    if (this.loginForm.invalid) {\n      this.errorMessage = \"Por favor, preencha o e-mail e a senha.\";\n      return;\n    }\n    this.isLoading = true;\n    this.errorMessage = null;\n    const {\n      email,\n      senha_normal\n    } = this.loginForm.value;\n    this.authService.login(email, senha_normal).subscribe({\n      next: response => {\n        this.isLoading = false;\n        if (response.userRole) {\n          this.redirectUser(response.userRole);\n        } else {\n          this.errorMessage = \"E-mail ou senha inválidos.\";\n        }\n      },\n      error: () => {\n        this.isLoading = false;\n        this.errorMessage = \"E-mail ou senha inválidos.\";\n      }\n    });\n  }\n  cadastrarCliente() {\n    this.router.navigate(['/cliente/cadastro']);\n  }\n  redirectUser(perfil) {\n    if (!perfil) {\n      this.errorMessage = \"Perfil de usuário não reconhecido.\";\n      this.authService.logout();\n      return;\n    }\n    switch (perfil) {\n      case Perfil.ADMIN:\n        this.router.navigate(['/admin/clientes']);\n        break;\n      case Perfil.CLIENTE:\n        this.router.navigate(['/cliente/meus-agendamentos']);\n        break;\n      default:\n        this.errorMessage = \"Perfil de usuário não reconhecido.\";\n        this.authService.logout();\n        break;\n    }\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);","map":{"version":3,"names":["Component","Validators","Perfil","LoginComponent","constructor","fb","authService","router","errorMessage","isLoading","showPassword","loginForm","group","email","required","senha_normal","ngOnInit","perfil","getUserRole","isAuthenticated","redirectUser","onSubmit","invalid","value","login","subscribe","next","response","userRole","error","cadastrarCliente","navigate","logout","ADMIN","CLIENTE","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\TCC\\petflow\\petflow-web\\src\\app\\features\\admin\\auth\\login\\login.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService, Perfil } from '../../../core/services/auth.service';\r\n\r\n@Component({\r\nselector: 'app-login',\r\ntemplateUrl: './login.component.html',\r\nstyleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\nloginForm: FormGroup;\r\nerrorMessage: string | null = null;\r\nisLoading = false;\r\nshowPassword = false;\r\n\r\nconstructor(\r\n    private fb: FormBuilder,\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) {\r\n    this.loginForm = this.fb.group({\r\n      email: ['', [Validators.required, Validators.email]],\r\n      senha_normal: ['', [Validators.required]]\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    const perfil = this.authService.getUserRole();\r\n    if (this.authService.isAuthenticated() && perfil) {\r\n      this.redirectUser(perfil);\r\n    }\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (this.loginForm.invalid) {\r\n      this.errorMessage = \"Por favor, preencha o e-mail e a senha.\";\r\n      return;\r\n    }\r\n\r\n    this.isLoading = true;\r\n    this.errorMessage = null;\r\n\r\n    const { email, senha_normal } = this.loginForm.value;\r\n\r\n    this.authService.login(email, senha_normal).subscribe({\r\n      next: (response) => {\r\n        this.isLoading = false;\r\n        if (response.userRole) {\r\n          this.redirectUser(response.userRole);\r\n        } else {\r\n          this.errorMessage = \"E-mail ou senha inválidos.\";\r\n        }\r\n      },\r\n      error: () => {\r\n        this.isLoading = false;\r\n        this.errorMessage = \"E-mail ou senha inválidos.\";\r\n      }\r\n    });\r\n  }\r\n\r\n  cadastrarCliente(): void {\r\n    this.router.navigate(['/cliente/cadastro']);\r\n  }\r\n\r\n  private redirectUser(perfil: Perfil | null): void {\r\n    if (!perfil) {\r\n      this.errorMessage = \"Perfil de usuário não reconhecido.\";\r\n      this.authService.logout();\r\n      return;\r\n    }\r\n\r\n    switch (perfil) {\r\n      case Perfil.ADMIN:\r\n        this.router.navigate(['/admin/clientes']);\r\n        break;\r\n      case Perfil.CLIENTE:\r\n        this.router.navigate(['/cliente/meus-agendamentos']);\r\n        break;\r\n      default:\r\n        this.errorMessage = \"Perfil de usuário não reconhecido.\";\r\n        this.authService.logout();\r\n        break;\r\n    }\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}