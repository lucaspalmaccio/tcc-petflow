{"ast":null,"code":"import { throwError, BehaviorSubject } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\n// Enum de perfis\nexport var Perfil;\n(function (Perfil) {\n  Perfil[\"ADMIN\"] = \"ADMIN\";\n  Perfil[\"CLIENTE\"] = \"CLIENTE\";\n})(Perfil || (Perfil = {}));\nexport class AuthService {\n  constructor(router, http) {\n    this.router = router;\n    this.http = http;\n    this.apiUrl = 'http://localhost:8081/auth';\n    // Inicializa os BehaviorSubjects com os dados do localStorage\n    this.currentUserRoleSubject = new BehaviorSubject(this.getUserRoleFromStorage());\n    this.currentUserNameSubject = new BehaviorSubject(this.getUserNameFromStorage());\n    this.currentUserRole$ = this.currentUserRoleSubject.asObservable();\n    this.currentUserName$ = this.currentUserNameSubject.asObservable();\n  }\n  // Método de login atualizado para usar 'senha_normal'\n  // IMPORTANTE (Segurança): Este método usa 'senha_normal' (texto puro).\n  // Para produção, o ideal é usar 'senha' (com hash) e um PasswordEncoder no backend.\n  login(email, senha_normal) {\n    // Envia 'senha_normal'\n    return this.http.post(`${this.apiUrl}/login`, {\n      email,\n      senha_normal\n    }).pipe(tap(response => {\n      if (!response.userRole) {\n        throw new Error('Usuário ou senha inválidos');\n      }\n      this.setSession(response);\n    }), catchError(err => {\n      console.error('Erro no login', err);\n      return throwError(() => new Error('Usuário ou senha inválidos'));\n    }));\n  }\n  setSession(authResponse) {\n    localStorage.setItem('petflow_auth_token', authResponse.token ?? '');\n    localStorage.setItem('petflow_user_role', authResponse.userRole ?? '');\n    localStorage.setItem('petflow_user_name', authResponse.userName ?? '');\n    if (authResponse.expiresIn) {\n      const expiresAt = Date.now() + authResponse.expiresIn * 1000;\n      localStorage.setItem('petflow_token_expires', expiresAt.toString());\n    }\n    // Notifica os assinantes sobre a mudança de estado\n    this.currentUserRoleSubject.next(authResponse.userRole);\n    this.currentUserNameSubject.next(authResponse.userName);\n  }\n  logout() {\n    localStorage.clear();\n    // Notifica os assinantes sobre o logout\n    this.currentUserRoleSubject.next(null);\n    this.currentUserNameSubject.next(null);\n    this.router.navigate(['/auth/login']);\n  }\n  getToken() {\n    return localStorage.getItem('petflow_auth_token');\n  }\n  // Renomeado para evitar confusão com o getter público\n  getUserRoleFromStorage() {\n    const role = localStorage.getItem('petflow_user_role');\n    if (!role) return null;\n    return role === Perfil.ADMIN ? Perfil.ADMIN : Perfil.CLIENTE;\n  }\n  // Renomeado para evitar confusão\n  getUserNameFromStorage() {\n    return localStorage.getItem('petflow_user_name');\n  }\n  // Getter público para o valor atual (não reativo)\n  getUserRole() {\n    return this.currentUserRoleSubject.value;\n  }\n  // Getter público para o valor atual (não reativo)\n  getUserName() {\n    return this.currentUserNameSubject.value;\n  }\n  isAuthenticated() {\n    const token = this.getToken();\n    const expires = localStorage.getItem('petflow_token_expires');\n    if (!token) return false;\n    // Se não houver tempo de expiração, considere válido (embora não seja ideal)\n    if (!expires) return true;\n    if (Date.now() > Number(expires)) {\n      this.logout(); // Limpa a sessão expirada\n      return false;\n    }\n    return true;\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["throwError","BehaviorSubject","catchError","tap","Perfil","AuthService","constructor","router","http","apiUrl","currentUserRoleSubject","getUserRoleFromStorage","currentUserNameSubject","getUserNameFromStorage","currentUserRole$","asObservable","currentUserName$","login","email","senha_normal","post","pipe","response","userRole","Error","setSession","err","console","error","authResponse","localStorage","setItem","token","userName","expiresIn","expiresAt","Date","now","toString","next","logout","clear","navigate","getToken","getItem","role","ADMIN","CLIENTE","getUserRole","value","getUserName","isAuthenticated","expires","Number","i0","ɵɵinject","i1","Router","i2","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\TCC\\petflow\\petflow-web\\src\\app\\core\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, throwError, BehaviorSubject } from 'rxjs';\r\nimport { catchError, tap } from 'rxjs/operators';\r\n\r\n// Enum de perfis\r\nexport enum Perfil {\r\nADMIN = 'ADMIN',\r\nCLIENTE = 'CLIENTE'\r\n}\r\n\r\n// Interface da resposta do backend\r\nexport interface LoginResponse {\r\ntoken: string | null;\r\nexpiresIn: number | null;\r\nuserName: string | null;\r\nuserRole: Perfil | null;\r\n}\r\n\r\n@Injectable({\r\nprovidedIn: 'root'\r\n})\r\nexport class AuthService {\r\nprivate apiUrl = 'http://localhost:8081/auth';\r\n\r\n// BehaviorSubject para estado de autenticação reativo\r\nprivate currentUserRoleSubject: BehaviorSubject<Perfil | null>;\r\npublic currentUserRole$: Observable<Perfil | null>;\r\n\r\nprivate currentUserNameSubject: BehaviorSubject<string | null>;\r\npublic currentUserName$: Observable<string | null>;\r\n\r\nconstructor(private router: Router, private http: HttpClient) {\r\n    // Inicializa os BehaviorSubjects com os dados do localStorage\r\n    this.currentUserRoleSubject = new BehaviorSubject<Perfil | null>(this.getUserRoleFromStorage());\r\n    this.currentUserNameSubject = new BehaviorSubject<string | null>(this.getUserNameFromStorage());\r\n\r\n    this.currentUserRole$ = this.currentUserRoleSubject.asObservable();\r\n    this.currentUserName$ = this.currentUserNameSubject.asObservable();\r\n  }\r\n\r\n  // Método de login atualizado para usar 'senha_normal'\r\n  // IMPORTANTE (Segurança): Este método usa 'senha_normal' (texto puro).\r\n  // Para produção, o ideal é usar 'senha' (com hash) e um PasswordEncoder no backend.\r\n  login(email: string, senha_normal: string): Observable<LoginResponse> {\r\n    // Envia 'senha_normal'\r\n    return this.http.post<LoginResponse>(`${this.apiUrl}/login`, { email, senha_normal })\r\n      .pipe(\r\n        tap(response => {\r\n          if (!response.userRole) {\r\n            throw new Error('Usuário ou senha inválidos');\r\n          }\r\n          this.setSession(response);\r\n        }),\r\n        catchError(err => {\r\n          console.error('Erro no login', err);\r\n          return throwError(() => new Error('Usuário ou senha inválidos'));\r\n        })\r\n      );\r\n  }\r\n\r\n  private setSession(authResponse: LoginResponse): void {\r\n    localStorage.setItem('petflow_auth_token', authResponse.token ?? '');\r\n    localStorage.setItem('petflow_user_role', authResponse.userRole ?? '');\r\n    localStorage.setItem('petflow_user_name', authResponse.userName ?? '');\r\n    if (authResponse.expiresIn) {\r\n      const expiresAt = Date.now() + authResponse.expiresIn * 1000;\r\n      localStorage.setItem('petflow_token_expires', expiresAt.toString());\r\n    }\r\n\r\n    // Notifica os assinantes sobre a mudança de estado\r\n    this.currentUserRoleSubject.next(authResponse.userRole);\r\n    this.currentUserNameSubject.next(authResponse.userName);\r\n  }\r\n\r\n  logout(): void {\r\n    localStorage.clear();\r\n\r\n    // Notifica os assinantes sobre o logout\r\n    this.currentUserRoleSubject.next(null);\r\n    this.currentUserNameSubject.next(null);\r\n\r\n    this.router.navigate(['/auth/login']);\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return localStorage.getItem('petflow_auth_token');\r\n  }\r\n\r\n  // Renomeado para evitar confusão com o getter público\r\n  private getUserRoleFromStorage(): Perfil | null {\r\n    const role = localStorage.getItem('petflow_user_role');\r\n    if (!role) return null;\r\n    return role === Perfil.ADMIN ? Perfil.ADMIN : Perfil.CLIENTE;\r\n  }\r\n\r\n  // Renomeado para evitar confusão\r\n  private getUserNameFromStorage(): string | null {\r\n    return localStorage.getItem('petflow_user_name');\r\n  }\r\n\r\n  // Getter público para o valor atual (não reativo)\r\n  public getUserRole(): Perfil | null {\r\n    return this.currentUserRoleSubject.value;\r\n  }\r\n\r\n  // Getter público para o valor atual (não reativo)\r\n  public getUserName(): string | null {\r\n    return this.currentUserNameSubject.value;\r\n  }\r\n\r\n\r\n  isAuthenticated(): boolean {\r\n    const token = this.getToken();\r\n    const expires = localStorage.getItem('petflow_token_expires');\r\n    if (!token) return false;\r\n\r\n    // Se não houver tempo de expiração, considere válido (embora não seja ideal)\r\n    if (!expires) return true;\r\n\r\n    if (Date.now() > Number(expires)) {\r\n        this.logout(); // Limpa a sessão expirada\r\n        return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}