{"ast":null,"code":"import { inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\n/**\n* Guarda funcional para proteger as rotas do Cliente (Sprint 03).\n*/\nexport const clienteAuthGuard = (route, state) => {\n  const authService = inject(AuthService);\n  const router = inject(Router);\n  // 1. O usuário está logado?\n  if (!authService.isAuthenticated()) {\n    // Não está logado, redireciona para o login\n    router.navigate(['/auth/login']);\n    return false;\n  }\n  // 2. O usuário é um CLIENTE?\n  // (Permitimos ADMIN também, caso ele precise acessar a visão do cliente)\n  const role = authService.getUserRole();\n  if (role === 'ROLE_CLIENTE' || role === 'ROLE_ADMIN') {\n    return true; // Permite acesso\n  }\n  // Se não for nenhum dos dois, nega o acesso.\n  console.error('Acesso negado. Requer ROLE_CLIENTE ou ROLE_ADMIN.');\n  authService.logout(); // Desloga o usuário\n  return false;\n};","map":{"version":3,"names":["inject","Router","AuthService","clienteAuthGuard","route","state","authService","router","isAuthenticated","navigate","role","getUserRole","console","error","logout"],"sources":["C:\\TCC\\petflow\\petflow-web\\src\\app\\core\\guards\\cliente.guard.ts"],"sourcesContent":["import { inject } from '@angular/core';\r\nimport { CanActivateFn, Router } from '@angular/router';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n/**\r\n* Guarda funcional para proteger as rotas do Cliente (Sprint 03).\r\n*/\r\nexport const clienteAuthGuard: CanActivateFn = (route, state) => {\r\nconst authService = inject(AuthService);\r\nconst router = inject(Router);\r\n\r\n// 1. O usuário está logado?\r\nif (!authService.isAuthenticated()) {\r\n    // Não está logado, redireciona para o login\r\n    router.navigate(['/auth/login']);\r\n    return false;\r\n  }\r\n\r\n  // 2. O usuário é um CLIENTE?\r\n  // (Permitimos ADMIN também, caso ele precise acessar a visão do cliente)\r\n  const role = authService.getUserRole();\r\n  if (role === 'ROLE_CLIENTE' || role === 'ROLE_ADMIN') {\r\n    return true; // Permite acesso\r\n  }\r\n\r\n  // Se não for nenhum dos dois, nega o acesso.\r\n  console.error('Acesso negado. Requer ROLE_CLIENTE ou ROLE_ADMIN.');\r\n  authService.logout(); // Desloga o usuário\r\n  return false;\r\n};"],"mappings":"AAAA,SAASA,MAAM,QAAQ,eAAe;AACtC,SAAwBC,MAAM,QAAQ,iBAAiB;AACvD,SAASC,WAAW,QAAQ,0BAA0B;AAEtD;;;AAGA,OAAO,MAAMC,gBAAgB,GAAkBA,CAACC,KAAK,EAAEC,KAAK,KAAI;EAChE,MAAMC,WAAW,GAAGN,MAAM,CAACE,WAAW,CAAC;EACvC,MAAMK,MAAM,GAAGP,MAAM,CAACC,MAAM,CAAC;EAE7B;EACA,IAAI,CAACK,WAAW,CAACE,eAAe,EAAE,EAAE;IAChC;IACAD,MAAM,CAACE,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC;IAChC,OAAO,KAAK;;EAGd;EACA;EACA,MAAMC,IAAI,GAAGJ,WAAW,CAACK,WAAW,EAAE;EACtC,IAAID,IAAI,KAAK,cAAc,IAAIA,IAAI,KAAK,YAAY,EAAE;IACpD,OAAO,IAAI,CAAC,CAAC;;EAGf;EACAE,OAAO,CAACC,KAAK,CAAC,mDAAmD,CAAC;EAClEP,WAAW,CAACQ,MAAM,EAAE,CAAC,CAAC;EACtB,OAAO,KAAK;AACd,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}