{"ast":null,"code":"import { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nconst AUTH_TOKEN_KEY = 'petflow_auth_token';\nconst USER_ROLE_KEY = 'petflow_user_role';\nconst USER_NAME_KEY = 'petflow_user_name';\nclass AuthService {\n  constructor(router) {\n    this.router = router;\n  }\n  /**\n   * Simula o login do usuÃ¡rio (modo de testes).\n   * Qualquer email/senha funciona.\n   */\n  login(email, senha) {\n    console.log('ðŸ”“ [MODO TESTE] Login simulado:', email);\n    const fakeResponse = {\n      token: 'fake-token-123',\n      userRole: email.includes('admin') ? 'ADMIN' : 'CLIENTE',\n      userName: email.split('@')[0]\n    };\n    this.setSession(fakeResponse);\n    return of(fakeResponse);\n  }\n  /**\n   * Armazena dados falsos no localStorage (simulando login real).\n   */\n  setSession(authResponse) {\n    localStorage.setItem(AUTH_TOKEN_KEY, authResponse.token ?? '');\n    localStorage.setItem(USER_ROLE_KEY, authResponse.userRole ?? '');\n    localStorage.setItem(USER_NAME_KEY, authResponse.userName ?? '');\n  }\n  /**\n   * Faz logout limpando o localStorage e redirecionando para a tela de login.\n   */\n  logout() {\n    this.clearSession();\n    this.router.navigate(['/auth/login']);\n  }\n  clearSession() {\n    localStorage.removeItem(AUTH_TOKEN_KEY);\n    localStorage.removeItem(USER_ROLE_KEY);\n    localStorage.removeItem(USER_NAME_KEY);\n  }\n  getToken() {\n    return localStorage.getItem(AUTH_TOKEN_KEY);\n  }\n  isAuthenticated() {\n    // sempre retorna true (modo teste)\n    return true;\n  }\n  getUserRole() {\n    return localStorage.getItem(USER_ROLE_KEY) ?? 'ADMIN';\n  }\n  getUserName() {\n    return localStorage.getItem(USER_NAME_KEY) ?? 'UsuÃ¡rio Teste';\n  }\n  static {\n    this.Éµfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ÉµÉµinject(i1.Router));\n    };\n  }\n  static {\n    this.Éµprov = /*@__PURE__*/i0.ÉµÉµdefineInjectable({\n      token: AuthService,\n      factory: AuthService.Éµfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { AuthService };","map":{"version":3,"names":["of","AUTH_TOKEN_KEY","USER_ROLE_KEY","USER_NAME_KEY","AuthService","constructor","router","login","email","senha","console","log","fakeResponse","token","userRole","includes","userName","split","setSession","authResponse","localStorage","setItem","logout","clearSession","navigate","removeItem","getToken","getItem","isAuthenticated","getUserRole","getUserName","i0","ÉµÉµinject","i1","Router","factory","Éµfac","providedIn"],"sources":["C:\\TCC\\petflow\\petflow-web\\src\\app\\core\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Observable, of } from 'rxjs';\r\nimport { LoginResponse } from '../models/auth.models';\r\n\r\nconst AUTH_TOKEN_KEY = 'petflow_auth_token';\r\nconst USER_ROLE_KEY = 'petflow_user_role';\r\nconst USER_NAME_KEY = 'petflow_user_name';\r\n\r\n@Injectable({\r\nprovidedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\r\nconstructor(private router: Router) {}\r\n\r\n  /**\r\n   * Simula o login do usuÃ¡rio (modo de testes).\r\n   * Qualquer email/senha funciona.\r\n   */\r\n  login(email: string, senha: string): Observable<LoginResponse | null> {\r\n    console.log('ðŸ”“ [MODO TESTE] Login simulado:', email);\r\n\r\n    const fakeResponse: LoginResponse = {\r\n      token: 'fake-token-123',\r\n      userRole: email.includes('admin') ? 'ADMIN' : 'CLIENTE',\r\n      userName: email.split('@')[0]\r\n    };\r\n\r\n    this.setSession(fakeResponse);\r\n    return of(fakeResponse);\r\n  }\r\n\r\n  /**\r\n   * Armazena dados falsos no localStorage (simulando login real).\r\n   */\r\n  private setSession(authResponse: LoginResponse): void {\r\n    localStorage.setItem(AUTH_TOKEN_KEY, authResponse.token ?? '');\r\n    localStorage.setItem(USER_ROLE_KEY, authResponse.userRole ?? '');\r\n    localStorage.setItem(USER_NAME_KEY, authResponse.userName ?? '');\r\n  }\r\n\r\n  /**\r\n   * Faz logout limpando o localStorage e redirecionando para a tela de login.\r\n   */\r\n  logout(): void {\r\n    this.clearSession();\r\n    this.router.navigate(['/auth/login']);\r\n  }\r\n\r\n  private clearSession(): void {\r\n    localStorage.removeItem(AUTH_TOKEN_KEY);\r\n    localStorage.removeItem(USER_ROLE_KEY);\r\n    localStorage.removeItem(USER_NAME_KEY);\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return localStorage.getItem(AUTH_TOKEN_KEY);\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    // sempre retorna true (modo teste)\r\n    return true;\r\n  }\r\n\r\n  getUserRole(): string | null {\r\n    return localStorage.getItem(USER_ROLE_KEY) ?? 'ADMIN';\r\n  }\r\n\r\n  getUserName(): string | null {\r\n    return localStorage.getItem(USER_NAME_KEY) ?? 'UsuÃ¡rio Teste';\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAAqBA,EAAE,QAAQ,MAAM;;;AAGrC,MAAMC,cAAc,GAAG,oBAAoB;AAC3C,MAAMC,aAAa,GAAG,mBAAmB;AACzC,MAAMC,aAAa,GAAG,mBAAmB;AAEzC,MAGaC,WAAW;EAExBC,YAAoBC,MAAc;IAAd,KAAAA,MAAM,GAANA,MAAM;EAAW;EAEnC;;;;EAIAC,KAAKA,CAACC,KAAa,EAAEC,KAAa;IAChCC,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEH,KAAK,CAAC;IAErD,MAAMI,YAAY,GAAkB;MAClCC,KAAK,EAAE,gBAAgB;MACvBC,QAAQ,EAAEN,KAAK,CAACO,QAAQ,CAAC,OAAO,CAAC,GAAG,OAAO,GAAG,SAAS;MACvDC,QAAQ,EAAER,KAAK,CAACS,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;KAC7B;IAED,IAAI,CAACC,UAAU,CAACN,YAAY,CAAC;IAC7B,OAAOZ,EAAE,CAACY,YAAY,CAAC;EACzB;EAEA;;;EAGQM,UAAUA,CAACC,YAA2B;IAC5CC,YAAY,CAACC,OAAO,CAACpB,cAAc,EAAEkB,YAAY,CAACN,KAAK,IAAI,EAAE,CAAC;IAC9DO,YAAY,CAACC,OAAO,CAACnB,aAAa,EAAEiB,YAAY,CAACL,QAAQ,IAAI,EAAE,CAAC;IAChEM,YAAY,CAACC,OAAO,CAAClB,aAAa,EAAEgB,YAAY,CAACH,QAAQ,IAAI,EAAE,CAAC;EAClE;EAEA;;;EAGAM,MAAMA,CAAA;IACJ,IAAI,CAACC,YAAY,EAAE;IACnB,IAAI,CAACjB,MAAM,CAACkB,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC;EACvC;EAEQD,YAAYA,CAAA;IAClBH,YAAY,CAACK,UAAU,CAACxB,cAAc,CAAC;IACvCmB,YAAY,CAACK,UAAU,CAACvB,aAAa,CAAC;IACtCkB,YAAY,CAACK,UAAU,CAACtB,aAAa,CAAC;EACxC;EAEAuB,QAAQA,CAAA;IACN,OAAON,YAAY,CAACO,OAAO,CAAC1B,cAAc,CAAC;EAC7C;EAEA2B,eAAeA,CAAA;IACb;IACA,OAAO,IAAI;EACb;EAEAC,WAAWA,CAAA;IACT,OAAOT,YAAY,CAACO,OAAO,CAACzB,aAAa,CAAC,IAAI,OAAO;EACvD;EAEA4B,WAAWA,CAAA;IACT,OAAOV,YAAY,CAACO,OAAO,CAACxB,aAAa,CAAC,IAAI,eAAe;EAC/D;;;uBA3DWC,WAAW,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAAX9B,WAAW;MAAA+B,OAAA,EAAX/B,WAAW,CAAAgC,IAAA;MAAAC,UAAA,EAFZ;IAAM;EAAA;;SAELjC,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}