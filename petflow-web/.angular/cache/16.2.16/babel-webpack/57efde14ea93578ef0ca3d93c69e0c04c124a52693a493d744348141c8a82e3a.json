{"ast":null,"code":"import { tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nconst AUTH_TOKEN_KEY = 'petflow_auth_token';\nconst USER_ROLE_KEY = 'petflow_user_role';\nconst USER_NAME_KEY = 'petflow_user_name';\nconst TOKEN_EXPIRES_KEY = 'petflow_token_expires';\nexport class AuthService {\n  constructor(router, http) {\n    this.router = router;\n    this.http = http;\n    this.apiUrl = 'http://localhost:8080/api/auth'; // URL do backend\n  }\n  login(email, senha) {\n    return this.http.post(`${this.apiUrl}/login`, {\n      email,\n      senha\n    }).pipe(tap(response => {\n      this.setSession(response);\n      // Redireciona conforme perfil\n      if (response.userRole === 'ROLE_ADMIN') {\n        this.router.navigate(['/admin/clientes']);\n      } else if (response.userRole === 'ROLE_CLIENTE') {\n        this.router.navigate(['/cliente/home']); // ajuste para rota de cliente\n      }\n    }));\n  }\n  /** Salva token, role, nome e expiração no localStorage */\n  setSession(authResponse) {\n    localStorage.setItem(AUTH_TOKEN_KEY, authResponse.token);\n    localStorage.setItem(USER_ROLE_KEY, authResponse.userRole);\n    localStorage.setItem(USER_NAME_KEY, authResponse.userName);\n    localStorage.setItem(TOKEN_EXPIRES_KEY, authResponse.expiresIn.toString());\n  }\n  logout() {\n    this.clearSession();\n    this.router.navigate(['/auth/login']);\n  }\n  clearSession() {\n    localStorage.removeItem(AUTH_TOKEN_KEY);\n    localStorage.removeItem(USER_ROLE_KEY);\n    localStorage.removeItem(USER_NAME_KEY);\n    localStorage.removeItem(TOKEN_EXPIRES_KEY);\n  }\n  getToken() {\n    return localStorage.getItem(AUTH_TOKEN_KEY);\n  }\n  getUserRole() {\n    return localStorage.getItem(USER_ROLE_KEY);\n  }\n  getUserName() {\n    return localStorage.getItem(USER_NAME_KEY);\n  }\n  isAuthenticated() {\n    const token = this.getToken();\n    const expires = localStorage.getItem(TOKEN_EXPIRES_KEY);\n    if (!token || !expires) return false;\n    const now = Date.now();\n    return now < Number(expires);\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["tap","AUTH_TOKEN_KEY","USER_ROLE_KEY","USER_NAME_KEY","TOKEN_EXPIRES_KEY","AuthService","constructor","router","http","apiUrl","login","email","senha","post","pipe","response","setSession","userRole","navigate","authResponse","localStorage","setItem","token","userName","expiresIn","toString","logout","clearSession","removeItem","getToken","getItem","getUserRole","getUserName","isAuthenticated","expires","now","Date","Number","i0","ɵɵinject","i1","Router","i2","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\TCC\\petflow\\petflow-web\\src\\app\\core\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, tap } from 'rxjs';\r\n\r\nexport interface LoginResponse {\r\ntoken: string;\r\nexpiresIn: number;\r\nuserName: string;\r\nuserRole: 'ROLE_ADMIN' | 'ROLE_CLIENTE';\r\n}\r\n\r\nconst AUTH_TOKEN_KEY = 'petflow_auth_token';\r\nconst USER_ROLE_KEY = 'petflow_user_role';\r\nconst USER_NAME_KEY = 'petflow_user_name';\r\nconst TOKEN_EXPIRES_KEY = 'petflow_token_expires';\r\n\r\n@Injectable({\r\nprovidedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\r\nprivate apiUrl = 'http://localhost:8080/api/auth'; // URL do backend\r\n\r\nconstructor(private router: Router, private http: HttpClient) {}\r\n\r\n  login(email: string, senha: string): Observable<LoginResponse> {\r\n    return this.http.post<LoginResponse>(`${this.apiUrl}/login`, { email, senha })\r\n      .pipe(\r\n        tap(response => {\r\n          this.setSession(response);\r\n          // Redireciona conforme perfil\r\n          if (response.userRole === 'ROLE_ADMIN') {\r\n            this.router.navigate(['/admin/clientes']);\r\n          } else if (response.userRole === 'ROLE_CLIENTE') {\r\n            this.router.navigate(['/cliente/home']); // ajuste para rota de cliente\r\n          }\r\n        })\r\n      );\r\n  }\r\n\r\n  /** Salva token, role, nome e expiração no localStorage */\r\n  private setSession(authResponse: LoginResponse): void {\r\n    localStorage.setItem(AUTH_TOKEN_KEY, authResponse.token);\r\n    localStorage.setItem(USER_ROLE_KEY, authResponse.userRole);\r\n    localStorage.setItem(USER_NAME_KEY, authResponse.userName);\r\n    localStorage.setItem(TOKEN_EXPIRES_KEY, authResponse.expiresIn.toString());\r\n  }\r\n\r\n  logout(): void {\r\n    this.clearSession();\r\n    this.router.navigate(['/auth/login']);\r\n  }\r\n\r\n  private clearSession(): void {\r\n    localStorage.removeItem(AUTH_TOKEN_KEY);\r\n    localStorage.removeItem(USER_ROLE_KEY);\r\n    localStorage.removeItem(USER_NAME_KEY);\r\n    localStorage.removeItem(TOKEN_EXPIRES_KEY);\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return localStorage.getItem(AUTH_TOKEN_KEY);\r\n  }\r\n\r\n  getUserRole(): string | null {\r\n    return localStorage.getItem(USER_ROLE_KEY);\r\n  }\r\n\r\n  getUserName(): string | null {\r\n    return localStorage.getItem(USER_NAME_KEY);\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    const token = this.getToken();\r\n    const expires = localStorage.getItem(TOKEN_EXPIRES_KEY);\r\n    if (!token || !expires) return false;\r\n    const now = Date.now();\r\n    return now < Number(expires);\r\n  }\r\n}\r\n"],"mappings":"AAGA,SAAqBA,GAAG,QAAQ,MAAM;;;;AAStC,MAAMC,cAAc,GAAG,oBAAoB;AAC3C,MAAMC,aAAa,GAAG,mBAAmB;AACzC,MAAMC,aAAa,GAAG,mBAAmB;AACzC,MAAMC,iBAAiB,GAAG,uBAAuB;AAKjD,OAAM,MAAOC,WAAW;EAIxBC,YAAoBC,MAAc,EAAUC,IAAgB;IAAxC,KAAAD,MAAM,GAANA,MAAM;IAAkB,KAAAC,IAAI,GAAJA,IAAI;IAFxC,KAAAC,MAAM,GAAG,gCAAgC,CAAC,CAAC;EAEY;EAE7DC,KAAKA,CAACC,KAAa,EAAEC,KAAa;IAChC,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAgB,GAAG,IAAI,CAACJ,MAAM,QAAQ,EAAE;MAAEE,KAAK;MAAEC;IAAK,CAAE,CAAC,CAC3EE,IAAI,CACHd,GAAG,CAACe,QAAQ,IAAG;MACb,IAAI,CAACC,UAAU,CAACD,QAAQ,CAAC;MACzB;MACA,IAAIA,QAAQ,CAACE,QAAQ,KAAK,YAAY,EAAE;QACtC,IAAI,CAACV,MAAM,CAACW,QAAQ,CAAC,CAAC,iBAAiB,CAAC,CAAC;OAC1C,MAAM,IAAIH,QAAQ,CAACE,QAAQ,KAAK,cAAc,EAAE;QAC/C,IAAI,CAACV,MAAM,CAACW,QAAQ,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;;IAE7C,CAAC,CAAC,CACH;EACL;EAEA;EACQF,UAAUA,CAACG,YAA2B;IAC5CC,YAAY,CAACC,OAAO,CAACpB,cAAc,EAAEkB,YAAY,CAACG,KAAK,CAAC;IACxDF,YAAY,CAACC,OAAO,CAACnB,aAAa,EAAEiB,YAAY,CAACF,QAAQ,CAAC;IAC1DG,YAAY,CAACC,OAAO,CAAClB,aAAa,EAAEgB,YAAY,CAACI,QAAQ,CAAC;IAC1DH,YAAY,CAACC,OAAO,CAACjB,iBAAiB,EAAEe,YAAY,CAACK,SAAS,CAACC,QAAQ,EAAE,CAAC;EAC5E;EAEAC,MAAMA,CAAA;IACJ,IAAI,CAACC,YAAY,EAAE;IACnB,IAAI,CAACpB,MAAM,CAACW,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC;EACvC;EAEQS,YAAYA,CAAA;IAClBP,YAAY,CAACQ,UAAU,CAAC3B,cAAc,CAAC;IACvCmB,YAAY,CAACQ,UAAU,CAAC1B,aAAa,CAAC;IACtCkB,YAAY,CAACQ,UAAU,CAACzB,aAAa,CAAC;IACtCiB,YAAY,CAACQ,UAAU,CAACxB,iBAAiB,CAAC;EAC5C;EAEAyB,QAAQA,CAAA;IACN,OAAOT,YAAY,CAACU,OAAO,CAAC7B,cAAc,CAAC;EAC7C;EAEA8B,WAAWA,CAAA;IACT,OAAOX,YAAY,CAACU,OAAO,CAAC5B,aAAa,CAAC;EAC5C;EAEA8B,WAAWA,CAAA;IACT,OAAOZ,YAAY,CAACU,OAAO,CAAC3B,aAAa,CAAC;EAC5C;EAEA8B,eAAeA,CAAA;IACb,MAAMX,KAAK,GAAG,IAAI,CAACO,QAAQ,EAAE;IAC7B,MAAMK,OAAO,GAAGd,YAAY,CAACU,OAAO,CAAC1B,iBAAiB,CAAC;IACvD,IAAI,CAACkB,KAAK,IAAI,CAACY,OAAO,EAAE,OAAO,KAAK;IACpC,MAAMC,GAAG,GAAGC,IAAI,CAACD,GAAG,EAAE;IACtB,OAAOA,GAAG,GAAGE,MAAM,CAACH,OAAO,CAAC;EAC9B;;;uBA3DW7B,WAAW,EAAAiC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXtC,WAAW;MAAAuC,OAAA,EAAXvC,WAAW,CAAAwC,IAAA;MAAAC,UAAA,EAFZ;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}