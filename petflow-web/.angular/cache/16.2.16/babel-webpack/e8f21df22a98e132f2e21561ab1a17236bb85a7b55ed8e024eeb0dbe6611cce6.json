{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { tap, catchError, of } from 'rxjs';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst AUTH_TOKEN_KEY = 'petflow_auth_token';\nconst USER_ROLE_KEY = 'petflow_user_role';\nconst USER_NAME_KEY = 'petflow_user_name';\nclass AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.apiUrl = `${environment.apiUrl}/auth`;\n  }\n  login(email, senha) {\n    return this.http.post(`${this.apiUrl}/login`, {\n      username: email,\n      password: senha\n    }, {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    }).pipe(tap(response => this.setSession(response)), catchError(error => {\n      console.error(\"Erro no login:\", error);\n      this.clearSession();\n      return of(null);\n    }));\n  }\n  setSession(authResponse) {\n    if (!authResponse) return;\n    localStorage.setItem(AUTH_TOKEN_KEY, authResponse.token);\n    localStorage.setItem(USER_ROLE_KEY, authResponse.userRole);\n    localStorage.setItem(USER_NAME_KEY, authResponse.userName);\n  }\n  logout() {\n    this.clearSession();\n    this.router.navigate(['/auth/login']);\n  }\n  clearSession() {\n    localStorage.removeItem(AUTH_TOKEN_KEY);\n    localStorage.removeItem(USER_ROLE_KEY);\n    localStorage.removeItem(USER_NAME_KEY);\n  }\n  getToken() {\n    return localStorage.getItem(AUTH_TOKEN_KEY);\n  }\n  isAuthenticated() {\n    return !!this.getToken();\n  }\n  getUserRole() {\n    return localStorage.getItem(USER_ROLE_KEY);\n  }\n  getUserName() {\n    return localStorage.getItem(USER_NAME_KEY);\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { AuthService };","map":{"version":3,"names":["HttpHeaders","tap","catchError","of","environment","AUTH_TOKEN_KEY","USER_ROLE_KEY","USER_NAME_KEY","AuthService","constructor","http","router","apiUrl","login","email","senha","post","username","password","headers","pipe","response","setSession","error","console","clearSession","authResponse","localStorage","setItem","token","userRole","userName","logout","navigate","removeItem","getToken","getItem","isAuthenticated","getUserRole","getUserName","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\TCC\\petflow\\petflow-web\\src\\app\\core\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\nimport { Observable, tap, catchError, of } from 'rxjs';\r\nimport { environment } from '../../../environments/environment';\r\nimport { LoginResponse } from '../models/auth.models';\r\n\r\nconst AUTH_TOKEN_KEY = 'petflow_auth_token';\r\nconst USER_ROLE_KEY = 'petflow_user_role';\r\nconst USER_NAME_KEY = 'petflow_user_name';\r\n\r\n@Injectable({\r\nprovidedIn: 'root'\r\n})\r\nexport class AuthService {\r\nprivate apiUrl = `${environment.apiUrl}/auth`;\r\n\r\nconstructor(private http: HttpClient, private router: Router) { }\r\n\r\n  login(email: string, senha: string): Observable<LoginResponse | null> {\r\n    return this.http.post<LoginResponse>(\r\n      `${this.apiUrl}/login`,\r\n      { username: email, password: senha },\r\n      { headers: new HttpHeaders({ 'Content-Type': 'application/json' }) }\r\n    ).pipe(\r\n      tap((response) => this.setSession(response)),\r\n      catchError((error) => {\r\n        console.error(\"Erro no login:\", error);\r\n        this.clearSession();\r\n        return of(null);\r\n      })\r\n    );\r\n  }\r\n\r\n  private setSession(authResponse: LoginResponse): void {\r\n    if (!authResponse) return;\r\n    localStorage.setItem(AUTH_TOKEN_KEY, authResponse.token);\r\n    localStorage.setItem(USER_ROLE_KEY, authResponse.userRole);\r\n    localStorage.setItem(USER_NAME_KEY, authResponse.userName);\r\n  }\r\n\r\n  logout(): void {\r\n    this.clearSession();\r\n    this.router.navigate(['/auth/login']);\r\n  }\r\n\r\n  private clearSession(): void {\r\n    localStorage.removeItem(AUTH_TOKEN_KEY);\r\n    localStorage.removeItem(USER_ROLE_KEY);\r\n    localStorage.removeItem(USER_NAME_KEY);\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return localStorage.getItem(AUTH_TOKEN_KEY);\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return !!this.getToken();\r\n  }\r\n\r\n  getUserRole(): string | null {\r\n    return localStorage.getItem(USER_ROLE_KEY);\r\n  }\r\n\r\n  getUserName(): string | null {\r\n    return localStorage.getItem(USER_NAME_KEY);\r\n  }\r\n}\r\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAAqBC,GAAG,EAAEC,UAAU,EAAEC,EAAE,QAAQ,MAAM;AACtD,SAASC,WAAW,QAAQ,mCAAmC;;;;AAG/D,MAAMC,cAAc,GAAG,oBAAoB;AAC3C,MAAMC,aAAa,GAAG,mBAAmB;AACzC,MAAMC,aAAa,GAAG,mBAAmB;AAEzC,MAGaC,WAAW;EAGxBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;IAF5C,KAAAC,MAAM,GAAG,GAAGR,WAAW,CAACQ,MAAM,OAAO;EAEmB;EAE9DC,KAAKA,CAACC,KAAa,EAAEC,KAAa;IAChC,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CACnB,GAAG,IAAI,CAACJ,MAAM,QAAQ,EACtB;MAAEK,QAAQ,EAAEH,KAAK;MAAEI,QAAQ,EAAEH;IAAK,CAAE,EACpC;MAAEI,OAAO,EAAE,IAAInB,WAAW,CAAC;QAAE,cAAc,EAAE;MAAkB,CAAE;IAAC,CAAE,CACrE,CAACoB,IAAI,CACJnB,GAAG,CAAEoB,QAAQ,IAAK,IAAI,CAACC,UAAU,CAACD,QAAQ,CAAC,CAAC,EAC5CnB,UAAU,CAAEqB,KAAK,IAAI;MACnBC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;MACtC,IAAI,CAACE,YAAY,EAAE;MACnB,OAAOtB,EAAE,CAAC,IAAI,CAAC;IACjB,CAAC,CAAC,CACH;EACH;EAEQmB,UAAUA,CAACI,YAA2B;IAC5C,IAAI,CAACA,YAAY,EAAE;IACnBC,YAAY,CAACC,OAAO,CAACvB,cAAc,EAAEqB,YAAY,CAACG,KAAK,CAAC;IACxDF,YAAY,CAACC,OAAO,CAACtB,aAAa,EAAEoB,YAAY,CAACI,QAAQ,CAAC;IAC1DH,YAAY,CAACC,OAAO,CAACrB,aAAa,EAAEmB,YAAY,CAACK,QAAQ,CAAC;EAC5D;EAEAC,MAAMA,CAAA;IACJ,IAAI,CAACP,YAAY,EAAE;IACnB,IAAI,CAACd,MAAM,CAACsB,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC;EACvC;EAEQR,YAAYA,CAAA;IAClBE,YAAY,CAACO,UAAU,CAAC7B,cAAc,CAAC;IACvCsB,YAAY,CAACO,UAAU,CAAC5B,aAAa,CAAC;IACtCqB,YAAY,CAACO,UAAU,CAAC3B,aAAa,CAAC;EACxC;EAEA4B,QAAQA,CAAA;IACN,OAAOR,YAAY,CAACS,OAAO,CAAC/B,cAAc,CAAC;EAC7C;EAEAgC,eAAeA,CAAA;IACb,OAAO,CAAC,CAAC,IAAI,CAACF,QAAQ,EAAE;EAC1B;EAEAG,WAAWA,CAAA;IACT,OAAOX,YAAY,CAACS,OAAO,CAAC9B,aAAa,CAAC;EAC5C;EAEAiC,WAAWA,CAAA;IACT,OAAOZ,YAAY,CAACS,OAAO,CAAC7B,aAAa,CAAC;EAC5C;;;uBApDWC,WAAW,EAAAgC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAAXrC,WAAW;MAAAsC,OAAA,EAAXtC,WAAW,CAAAuC,IAAA;MAAAC,UAAA,EAFZ;IAAM;EAAA;;SAELxC,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}