{"ast":null,"code":"import { inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nexport const authGuard = (route, state) => {\n  const authService = inject(AuthService);\n  const router = inject(Router);\n  // 1️⃣ Bloqueia se não estiver autenticado\n  if (!authService.isAuthenticated()) {\n    router.navigate(['/auth/login']);\n    return false;\n  }\n  // 2️⃣ Obtém roles esperados e o perfil do usuário\n  const expectedRoles = route.data?.['roles'];\n  const userRole = authService.getUserRole();\n  // 3️⃣ Bloqueia se o perfil não for permitido\n  if (expectedRoles && (!userRole || !expectedRoles.includes(userRole))) {\n    console.error('Acesso negado: perfil não permitido.');\n    router.navigate(['/auth/login']);\n    return false;\n  }\n  // 4️⃣ Permite o acesso\n  return true;\n};","map":{"version":3,"names":["inject","Router","AuthService","authGuard","route","state","authService","router","isAuthenticated","navigate","expectedRoles","data","userRole","getUserRole","includes","console","error"],"sources":["C:\\TCC\\petflow\\petflow-web\\src\\app\\core\\guards\\auth.guard.ts"],"sourcesContent":["import { inject } from '@angular/core';\r\nimport { CanActivateFn, Router } from '@angular/router';\r\nimport { AuthService, Perfil } from '../services/auth.service';\r\n\r\nexport const authGuard: CanActivateFn = (route, state) => {\r\nconst authService = inject(AuthService);\r\nconst router = inject(Router);\r\n\r\n// 1️⃣ Bloqueia se não estiver autenticado\r\nif (!authService.isAuthenticated()) {\r\n    router.navigate(['/auth/login']);\r\n    return false;\r\n  }\r\n\r\n  // 2️⃣ Obtém roles esperados e o perfil do usuário\r\n  const expectedRoles = route.data?.['roles'] as Perfil[] | undefined;\r\n  const userRole = authService.getUserRole();\r\n\r\n  // 3️⃣ Bloqueia se o perfil não for permitido\r\n  if (expectedRoles && (!userRole || !expectedRoles.includes(userRole))) {\r\n    console.error('Acesso negado: perfil não permitido.');\r\n    router.navigate(['/auth/login']);\r\n    return false;\r\n  }\r\n\r\n  // 4️⃣ Permite o acesso\r\n  return true;\r\n};\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,eAAe;AACtC,SAAwBC,MAAM,QAAQ,iBAAiB;AACvD,SAASC,WAAW,QAAgB,0BAA0B;AAE9D,OAAO,MAAMC,SAAS,GAAkBA,CAACC,KAAK,EAAEC,KAAK,KAAI;EACzD,MAAMC,WAAW,GAAGN,MAAM,CAACE,WAAW,CAAC;EACvC,MAAMK,MAAM,GAAGP,MAAM,CAACC,MAAM,CAAC;EAE7B;EACA,IAAI,CAACK,WAAW,CAACE,eAAe,EAAE,EAAE;IAChCD,MAAM,CAACE,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC;IAChC,OAAO,KAAK;;EAGd;EACA,MAAMC,aAAa,GAAGN,KAAK,CAACO,IAAI,GAAG,OAAO,CAAyB;EACnE,MAAMC,QAAQ,GAAGN,WAAW,CAACO,WAAW,EAAE;EAE1C;EACA,IAAIH,aAAa,KAAK,CAACE,QAAQ,IAAI,CAACF,aAAa,CAACI,QAAQ,CAACF,QAAQ,CAAC,CAAC,EAAE;IACrEG,OAAO,CAACC,KAAK,CAAC,sCAAsC,CAAC;IACrDT,MAAM,CAACE,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC;IAChC,OAAO,KAAK;;EAGd;EACA,OAAO,IAAI;AACb,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}