{"ast":null,"code":"import { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nconst AUTH_TOKEN_KEY = 'petflow_auth_token';\nconst USER_ROLE_KEY = 'petflow_user_role';\nconst USER_NAME_KEY = 'petflow_user_name';\nconst USER_PET_KEY = 'petflow_user_pet';\nclass AuthService {\n  constructor(router) {\n    this.router = router;\n  }\n  /**\n   * Simula login para testes.\n   */\n  login(email, senha, role = 'ROLE_CLIENTE') {\n    console.log('ðŸ”“ [MODO TESTE] Login simulado:', email, 'Role:', role);\n    const fakeResponse = {\n      token: 'fake-jwt-token',\n      userRole: role,\n      userName: role === 'ROLE_ADMIN' ? 'Admin Teste' : 'Cliente Teste',\n      expiresIn: 999999\n    };\n    // pet associado\n    const pet = {\n      id: 1,\n      nome: 'Rex',\n      tipo: 'Cachorro'\n    };\n    this.setSession(fakeResponse, pet);\n    return of(fakeResponse);\n  }\n  /**\n   * Alterna perfil entre ADMIN e CLIENTE.\n   */\n  switchRole() {\n    const currentRole = this.getUserRole();\n    const newRole = currentRole === 'ROLE_ADMIN' ? 'ROLE_CLIENTE' : 'ROLE_ADMIN';\n    const newName = newRole === 'ROLE_ADMIN' ? 'Admin Teste' : 'Cliente Teste';\n    const fakeResponse = {\n      token: 'fake-jwt-token',\n      userRole: newRole,\n      userName: newName,\n      expiresIn: 999999\n    };\n    // mantÃ©m o pet sempre associado ao cliente\n    const pet = {\n      id: 1,\n      nome: 'Rex',\n      tipo: 'Cachorro'\n    };\n    this.setSession(fakeResponse, pet);\n    console.log(`ðŸ”„ Perfil alterado para: ${newRole}`);\n  }\n  setSession(authResponse, pet) {\n    localStorage.setItem(AUTH_TOKEN_KEY, authResponse.token ?? '');\n    localStorage.setItem(USER_ROLE_KEY, authResponse.userRole ?? '');\n    localStorage.setItem(USER_NAME_KEY, authResponse.userName ?? '');\n    if (pet) {\n      localStorage.setItem(USER_PET_KEY, JSON.stringify(pet));\n    }\n  }\n  logout() {\n    this.clearSession();\n    this.router.navigate(['/auth/login']);\n  }\n  clearSession() {\n    localStorage.removeItem(AUTH_TOKEN_KEY);\n    localStorage.removeItem(USER_ROLE_KEY);\n    localStorage.removeItem(USER_NAME_KEY);\n    localStorage.removeItem(USER_PET_KEY);\n  }\n  getToken() {\n    return localStorage.getItem(AUTH_TOKEN_KEY);\n  }\n  isAuthenticated() {\n    return true;\n  }\n  getUserRole() {\n    return localStorage.getItem(USER_ROLE_KEY) ?? 'ROLE_CLIENTE';\n  }\n  getUserName() {\n    return localStorage.getItem(USER_NAME_KEY) ?? 'Cliente Teste';\n  }\n  getUserPet() {\n    const petJson = localStorage.getItem(USER_PET_KEY);\n    return petJson ? JSON.parse(petJson) : null;\n  }\n  static {\n    this.Éµfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ÉµÉµinject(i1.Router));\n    };\n  }\n  static {\n    this.Éµprov = /*@__PURE__*/i0.ÉµÉµdefineInjectable({\n      token: AuthService,\n      factory: AuthService.Éµfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { AuthService };","map":{"version":3,"names":["of","AUTH_TOKEN_KEY","USER_ROLE_KEY","USER_NAME_KEY","USER_PET_KEY","AuthService","constructor","router","login","email","senha","role","console","log","fakeResponse","token","userRole","userName","expiresIn","pet","id","nome","tipo","setSession","switchRole","currentRole","getUserRole","newRole","newName","authResponse","localStorage","setItem","JSON","stringify","logout","clearSession","navigate","removeItem","getToken","getItem","isAuthenticated","getUserName","getUserPet","petJson","parse","i0","ÉµÉµinject","i1","Router","factory","Éµfac","providedIn"],"sources":["C:\\TCC\\petflow\\petflow-web\\src\\app\\core\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Observable, of } from 'rxjs';\r\nimport { LoginResponse } from '../models/auth.models';\r\n\r\nexport interface TestUser {\r\nuserName: string;\r\nuserRole: 'ROLE_ADMIN' | 'ROLE_CLIENTE';\r\npet: { id: number; nome: string; tipo: string };\r\n}\r\n\r\nconst AUTH_TOKEN_KEY = 'petflow_auth_token';\r\nconst USER_ROLE_KEY = 'petflow_user_role';\r\nconst USER_NAME_KEY = 'petflow_user_name';\r\nconst USER_PET_KEY = 'petflow_user_pet';\r\n\r\n@Injectable({\r\nprovidedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\r\nconstructor(private router: Router) {}\r\n\r\n  /**\r\n   * Simula login para testes.\r\n   */\r\n  login(email: string, senha: string, role: 'ROLE_ADMIN' | 'ROLE_CLIENTE' = 'ROLE_CLIENTE'): Observable<LoginResponse> {\r\n    console.log('ðŸ”“ [MODO TESTE] Login simulado:', email, 'Role:', role);\r\n\r\n    const fakeResponse: LoginResponse = {\r\n      token: 'fake-jwt-token',\r\n      userRole: role,\r\n      userName: role === 'ROLE_ADMIN' ? 'Admin Teste' : 'Cliente Teste',\r\n      expiresIn: 999999\r\n    };\r\n\r\n    // pet associado\r\n    const pet = {\r\n      id: 1,\r\n      nome: 'Rex',\r\n      tipo: 'Cachorro'\r\n    };\r\n\r\n    this.setSession(fakeResponse, pet);\r\n    return of(fakeResponse);\r\n  }\r\n\r\n  /**\r\n   * Alterna perfil entre ADMIN e CLIENTE.\r\n   */\r\n  switchRole(): void {\r\n    const currentRole = this.getUserRole();\r\n    const newRole = currentRole === 'ROLE_ADMIN' ? 'ROLE_CLIENTE' : 'ROLE_ADMIN';\r\n    const newName = newRole === 'ROLE_ADMIN' ? 'Admin Teste' : 'Cliente Teste';\r\n    const fakeResponse: LoginResponse = {\r\n      token: 'fake-jwt-token',\r\n      userRole: newRole,\r\n      userName: newName,\r\n      expiresIn: 999999\r\n    };\r\n\r\n    // mantÃ©m o pet sempre associado ao cliente\r\n    const pet = { id: 1, nome: 'Rex', tipo: 'Cachorro' };\r\n    this.setSession(fakeResponse, pet);\r\n    console.log(`ðŸ”„ Perfil alterado para: ${newRole}`);\r\n  }\r\n\r\n  private setSession(authResponse: LoginResponse, pet?: { id: number; nome: string; tipo: string }): void {\r\n    localStorage.setItem(AUTH_TOKEN_KEY, authResponse.token ?? '');\r\n    localStorage.setItem(USER_ROLE_KEY, authResponse.userRole ?? '');\r\n    localStorage.setItem(USER_NAME_KEY, authResponse.userName ?? '');\r\n    if (pet) {\r\n      localStorage.setItem(USER_PET_KEY, JSON.stringify(pet));\r\n    }\r\n  }\r\n\r\n  logout(): void {\r\n    this.clearSession();\r\n    this.router.navigate(['/auth/login']);\r\n  }\r\n\r\n  private clearSession(): void {\r\n    localStorage.removeItem(AUTH_TOKEN_KEY);\r\n    localStorage.removeItem(USER_ROLE_KEY);\r\n    localStorage.removeItem(USER_NAME_KEY);\r\n    localStorage.removeItem(USER_PET_KEY);\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return localStorage.getItem(AUTH_TOKEN_KEY);\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return true;\r\n  }\r\n\r\n  getUserRole(): string | null {\r\n    return localStorage.getItem(USER_ROLE_KEY) ?? 'ROLE_CLIENTE';\r\n  }\r\n\r\n  getUserName(): string | null {\r\n    return localStorage.getItem(USER_NAME_KEY) ?? 'Cliente Teste';\r\n  }\r\n\r\n  getUserPet(): { id: number; nome: string; tipo: string } | null {\r\n    const petJson = localStorage.getItem(USER_PET_KEY);\r\n    return petJson ? JSON.parse(petJson) : null;\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAAqBA,EAAE,QAAQ,MAAM;;;AASrC,MAAMC,cAAc,GAAG,oBAAoB;AAC3C,MAAMC,aAAa,GAAG,mBAAmB;AACzC,MAAMC,aAAa,GAAG,mBAAmB;AACzC,MAAMC,YAAY,GAAG,kBAAkB;AAEvC,MAGaC,WAAW;EAExBC,YAAoBC,MAAc;IAAd,KAAAA,MAAM,GAANA,MAAM;EAAW;EAEnC;;;EAGAC,KAAKA,CAACC,KAAa,EAAEC,KAAa,EAAEC,IAAA,GAAsC,cAAc;IACtFC,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEJ,KAAK,EAAE,OAAO,EAAEE,IAAI,CAAC;IAEpE,MAAMG,YAAY,GAAkB;MAClCC,KAAK,EAAE,gBAAgB;MACvBC,QAAQ,EAAEL,IAAI;MACdM,QAAQ,EAAEN,IAAI,KAAK,YAAY,GAAG,aAAa,GAAG,eAAe;MACjEO,SAAS,EAAE;KACZ;IAED;IACA,MAAMC,GAAG,GAAG;MACVC,EAAE,EAAE,CAAC;MACLC,IAAI,EAAE,KAAK;MACXC,IAAI,EAAE;KACP;IAED,IAAI,CAACC,UAAU,CAACT,YAAY,EAAEK,GAAG,CAAC;IAClC,OAAOnB,EAAE,CAACc,YAAY,CAAC;EACzB;EAEA;;;EAGAU,UAAUA,CAAA;IACR,MAAMC,WAAW,GAAG,IAAI,CAACC,WAAW,EAAE;IACtC,MAAMC,OAAO,GAAGF,WAAW,KAAK,YAAY,GAAG,cAAc,GAAG,YAAY;IAC5E,MAAMG,OAAO,GAAGD,OAAO,KAAK,YAAY,GAAG,aAAa,GAAG,eAAe;IAC1E,MAAMb,YAAY,GAAkB;MAClCC,KAAK,EAAE,gBAAgB;MACvBC,QAAQ,EAAEW,OAAO;MACjBV,QAAQ,EAAEW,OAAO;MACjBV,SAAS,EAAE;KACZ;IAED;IACA,MAAMC,GAAG,GAAG;MAAEC,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE,KAAK;MAAEC,IAAI,EAAE;IAAU,CAAE;IACpD,IAAI,CAACC,UAAU,CAACT,YAAY,EAAEK,GAAG,CAAC;IAClCP,OAAO,CAACC,GAAG,CAAC,4BAA4Bc,OAAO,EAAE,CAAC;EACpD;EAEQJ,UAAUA,CAACM,YAA2B,EAAEV,GAAgD;IAC9FW,YAAY,CAACC,OAAO,CAAC9B,cAAc,EAAE4B,YAAY,CAACd,KAAK,IAAI,EAAE,CAAC;IAC9De,YAAY,CAACC,OAAO,CAAC7B,aAAa,EAAE2B,YAAY,CAACb,QAAQ,IAAI,EAAE,CAAC;IAChEc,YAAY,CAACC,OAAO,CAAC5B,aAAa,EAAE0B,YAAY,CAACZ,QAAQ,IAAI,EAAE,CAAC;IAChE,IAAIE,GAAG,EAAE;MACPW,YAAY,CAACC,OAAO,CAAC3B,YAAY,EAAE4B,IAAI,CAACC,SAAS,CAACd,GAAG,CAAC,CAAC;;EAE3D;EAEAe,MAAMA,CAAA;IACJ,IAAI,CAACC,YAAY,EAAE;IACnB,IAAI,CAAC5B,MAAM,CAAC6B,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC;EACvC;EAEQD,YAAYA,CAAA;IAClBL,YAAY,CAACO,UAAU,CAACpC,cAAc,CAAC;IACvC6B,YAAY,CAACO,UAAU,CAACnC,aAAa,CAAC;IACtC4B,YAAY,CAACO,UAAU,CAAClC,aAAa,CAAC;IACtC2B,YAAY,CAACO,UAAU,CAACjC,YAAY,CAAC;EACvC;EAEAkC,QAAQA,CAAA;IACN,OAAOR,YAAY,CAACS,OAAO,CAACtC,cAAc,CAAC;EAC7C;EAEAuC,eAAeA,CAAA;IACb,OAAO,IAAI;EACb;EAEAd,WAAWA,CAAA;IACT,OAAOI,YAAY,CAACS,OAAO,CAACrC,aAAa,CAAC,IAAI,cAAc;EAC9D;EAEAuC,WAAWA,CAAA;IACT,OAAOX,YAAY,CAACS,OAAO,CAACpC,aAAa,CAAC,IAAI,eAAe;EAC/D;EAEAuC,UAAUA,CAAA;IACR,MAAMC,OAAO,GAAGb,YAAY,CAACS,OAAO,CAACnC,YAAY,CAAC;IAClD,OAAOuC,OAAO,GAAGX,IAAI,CAACY,KAAK,CAACD,OAAO,CAAC,GAAG,IAAI;EAC7C;;;uBAxFWtC,WAAW,EAAAwC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAAX3C,WAAW;MAAA4C,OAAA,EAAX5C,WAAW,CAAA6C,IAAA;MAAAC,UAAA,EAFZ;IAAM;EAAA;;SAEL9C,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}