{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../../core/services/auth.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction LoginComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵtext(1, \" O e-mail \\u00E9 obrigat\\u00F3rio. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵtext(1, \" Formato de e-mail inv\\u00E1lido. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵtext(1, \" A senha \\u00E9 obrigat\\u00F3ria. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.errorMessage, \" \");\n  }\n}\nlet LoginComponent = /*#__PURE__*/(() => {\n  class LoginComponent {\n    constructor(fb, authService, router) {\n      this.fb = fb;\n      this.authService = authService;\n      this.router = router;\n      this.errorMessage = null;\n      this.isLoading = false;\n      // Inicializa o formulário reativo\n      this.loginForm = this.fb.group({\n        // UC01 [117]: \"O usuário informa seu e-mail e senha\"\n        // Validação baseada no Fluxo de Exceção [122]: \"Campos Vazios\"\n        email: ['', [Validators.required, Validators.email]],\n        senha: ['', [Validators.required]]\n      });\n    }\n    ngOnInit() {\n      // Se o usuário já estiver logado (ex: acessou /login manualmente)\n      // o redireciona para a rota correta baseada no perfil.\n      if (this.authService.isAuthenticated()) {\n        const role = this.authService.getUserRole();\n        if (role === 'ROLE_ADMIN') {\n          this.router.navigate(['/admin']);\n        } else if (role === 'ROLE_CLIENTE') {\n          this.router.navigate(['/cliente']);\n        }\n      }\n    }\n    /**\n     * Chamado quando o formulário é enviado.\n     * UC01 [118]: \"O usuário aciona a opção 'Entrar'.\"\n     */\n    onSubmit() {\n      if (this.loginForm.invalid) {\n        this.errorMessage = \"Por favor, preencha o e-mail e a senha.\";\n        return;\n      }\n      this.isLoading = true;\n      this.errorMessage = null;\n      const {\n        email,\n        senha\n      } = this.loginForm.value;\n      // Chama o serviço de autenticação\n      this.authService.login(email, senha).subscribe({\n        next: response => {\n          this.isLoading = false;\n          if (response) {\n            // UC01 Pós-condição (Sucesso) [115]\n            // Redireciona com base no perfil retornado pela API\n            if (response.userRole === 'ROLE_ADMIN') {\n              this.router.navigate(['/admin']);\n            } else if (response.userRole === 'ROLE_CLIENTE') {\n              this.router.navigate(['/cliente']);\n            } else {\n              // Perfil desconhecido (não deveria acontecer)\n              this.errorMessage = \"Perfil de usuário inválido.\";\n              this.authService.logout();\n            }\n          } else {\n            // UC01 Fluxo de Exceção [123]: \"Credenciais Inválidas\"\n            this.errorMessage = \"E-mail ou senha inválidos.\";\n          }\n        },\n        error: err => {\n          // Erro de rede ou servidor fora do ar\n          this.isLoading = false;\n          this.errorMessage = \"Erro ao tentar conectar. Tente novamente.\";\n        }\n      });\n    }\n    static {\n      this.ɵfac = function LoginComponent_Factory(t) {\n        return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.Router));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: LoginComponent,\n        selectors: [[\"app-login\"]],\n        decls: 21,\n        vars: 7,\n        consts: [[1, \"login-container\"], [1, \"login-box\"], [1, \"login-title\"], [1, \"login-subtitle\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"email\", 1, \"form-label\"], [\"type\", \"email\", \"id\", \"email\", \"formControlName\", \"email\", \"placeholder\", \"admin@petflow.com.br\", 1, \"form-control\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"for\", \"senha\", 1, \"form-label\"], [\"type\", \"password\", \"id\", \"senha\", \"formControlName\", \"senha\", \"placeholder\", \"\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\", 1, \"form-control\"], [\"class\", \"error-message\", 4, \"ngIf\"], [\"type\", \"submit\", 1, \"btn-primary\", \"login-button\", 3, \"disabled\"], [1, \"text-danger\"], [1, \"error-message\"]],\n        template: function LoginComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h1\", 2);\n            i0.ɵɵtext(3, \"Petflow\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(4, \"p\", 3);\n            i0.ɵɵtext(5, \"Acesso ao Painel Administrativo\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(6, \"form\", 4);\n            i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_6_listener() {\n              return ctx.onSubmit();\n            });\n            i0.ɵɵelementStart(7, \"div\", 5)(8, \"label\", 6);\n            i0.ɵɵtext(9, \"E-mail\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(10, \"input\", 7);\n            i0.ɵɵtemplate(11, LoginComponent_div_11_Template, 2, 0, \"div\", 8);\n            i0.ɵɵtemplate(12, LoginComponent_div_12_Template, 2, 0, \"div\", 8);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(13, \"div\", 5)(14, \"label\", 9);\n            i0.ɵɵtext(15, \"Senha\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(16, \"input\", 10);\n            i0.ɵɵtemplate(17, LoginComponent_div_17_Template, 2, 0, \"div\", 8);\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(18, LoginComponent_div_18_Template, 2, 1, \"div\", 11);\n            i0.ɵɵelementStart(19, \"button\", 12);\n            i0.ɵɵtext(20);\n            i0.ɵɵelementEnd()()()();\n          }\n          if (rf & 2) {\n            let tmp_1_0;\n            let tmp_2_0;\n            let tmp_3_0;\n            i0.ɵɵadvance(6);\n            i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n            i0.ɵɵadvance(5);\n            i0.ɵɵproperty(\"ngIf\", ((tmp_1_0 = ctx.loginForm.get(\"email\")) == null ? null : tmp_1_0.touched) && ((tmp_1_0 = ctx.loginForm.get(\"email\")) == null ? null : tmp_1_0.hasError(\"required\")));\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx.loginForm.get(\"email\")) == null ? null : tmp_2_0.touched) && ((tmp_2_0 = ctx.loginForm.get(\"email\")) == null ? null : tmp_2_0.hasError(\"email\")));\n            i0.ɵɵadvance(5);\n            i0.ɵɵproperty(\"ngIf\", ((tmp_3_0 = ctx.loginForm.get(\"senha\")) == null ? null : tmp_3_0.touched) && ((tmp_3_0 = ctx.loginForm.get(\"senha\")) == null ? null : tmp_3_0.hasError(\"required\")));\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"disabled\", ctx.isLoading || ctx.loginForm.invalid);\n            i0.ɵɵadvance(1);\n            i0.ɵɵtextInterpolate1(\" \", ctx.isLoading ? \"Entrando...\" : \"Entrar\", \" \");\n          }\n        },\n        dependencies: [i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n        styles: [\".login-container[_ngcontent-%COMP%]{display:flex;align-items:center;justify-content:center;min-height:100vh;background-color:var(--color-light)}.login-box[_ngcontent-%COMP%]{width:100%;max-width:400px;padding:2.5rem;background-color:var(--color-white);border-radius:8px;box-shadow:var(--shadow-md);border-top:4px solid var(--color-primary)}.login-title[_ngcontent-%COMP%]{text-align:center;font-size:2.5rem;font-weight:700;color:var(--color-primary);margin-bottom:.5rem}.login-subtitle[_ngcontent-%COMP%]{text-align:center;font-size:1rem;color:var(--color-secondary);margin-bottom:2rem}.login-button[_ngcontent-%COMP%]{width:100%;padding:12px;font-size:1.1rem;margin-top:1rem}.login-button[_ngcontent-%COMP%]:disabled{background-color:var(--color-secondary);cursor:not-allowed}.error-message[_ngcontent-%COMP%]{background-color:#f8d7da;color:#721c24;border:1px solid #f5c6cb;padding:.75rem 1.25rem;border-radius:4px;margin-top:1rem;text-align:center}\"]\n      });\n    }\n  }\n  return LoginComponent;\n})();\nexport { LoginComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}