{"ast":null,"code":"import { throwError, BehaviorSubject } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\n// Enum de perfis\nexport var Perfil;\n(function (Perfil) {\n  Perfil[\"ADMIN\"] = \"ADMIN\";\n  Perfil[\"CLIENTE\"] = \"CLIENTE\";\n})(Perfil || (Perfil = {}));\nexport class AuthService {\n  constructor(router, http) {\n    this.router = router;\n    this.http = http;\n    this.apiUrl = 'http://localhost:8081/auth';\n    // Inicializa os BehaviorSubjects com os dados do localStorage\n    this.currentUserRoleSubject = new BehaviorSubject(this.getUserRoleFromStorage());\n    this.currentUserNameSubject = new BehaviorSubject(this.getUserNameFromStorage());\n    this.currentUserRole$ = this.currentUserRoleSubject.asObservable();\n    this.currentUserName$ = this.currentUserNameSubject.asObservable();\n  }\n  // Método de login usando snake_case 'senha_normal' para match com o backend\n  login(email, senha_normal) {\n    // Envia 'senha_normal' em snake_case\n    return this.http.post(`${this.apiUrl}/login`, {\n      email,\n      senha_normal\n    }).pipe(tap(response => {\n      if (!response.userRole) {\n        throw new Error('Usuário ou senha inválidos');\n      }\n      // ← SALVA O EMAIL TAMBÉM\n      this.setSession(response, email);\n    }), catchError(err => {\n      console.error('Erro no login', err);\n      return throwError(() => new Error('Usuário ou senha inválidos'));\n    }));\n  }\n  // ← MODIFICADO: Agora recebe o email como parâmetro\n  setSession(authResponse, email) {\n    // ← SALVA O EMAIL COMO TOKEN (solução temporária sem JWT)\n    localStorage.setItem('petflow_auth_token', email);\n    localStorage.setItem('petflow_user_email', email);\n    localStorage.setItem('petflow_user_role', authResponse.userRole ?? '');\n    localStorage.setItem('petflow_user_name', authResponse.userName ?? '');\n    if (authResponse.expiresIn) {\n      const expiresAt = Date.now() + authResponse.expiresIn * 1000;\n      localStorage.setItem('petflow_token_expires', expiresAt.toString());\n    }\n    // Notifica os assinantes sobre a mudança de estado\n    this.currentUserRoleSubject.next(authResponse.userRole);\n    this.currentUserNameSubject.next(authResponse.userName);\n  }\n  logout() {\n    localStorage.clear();\n    // Notifica os assinantes sobre o logout\n    this.currentUserRoleSubject.next(null);\n    this.currentUserNameSubject.next(null);\n    this.router.navigate(['/auth/login']);\n  }\n  getToken() {\n    return localStorage.getItem('petflow_auth_token');\n  }\n  // ← NOVO: Método para pegar o email\n  getUserEmail() {\n    return localStorage.getItem('petflow_user_email');\n  }\n  // Renomeado para evitar confusão com o getter público\n  getUserRoleFromStorage() {\n    return localStorage.getItem('petflow_user_role');\n  }\n  // Renomeado para evitar confusão\n  getUserNameFromStorage() {\n    return localStorage.getItem('petflow_user_name');\n  }\n  // Getter público para o valor atual (não reativo)\n  getUserRole() {\n    return this.currentUserRoleSubject.value;\n  }\n  // Getter público para o valor atual (não reativo)\n  getUserName() {\n    return this.currentUserNameSubject.value;\n  }\n  isAuthenticated() {\n    const token = this.getToken();\n    const expires = localStorage.getItem('petflow_token_expires');\n    if (!token) return false;\n    // Se não houver tempo de expiração, considere válido (embora não seja ideal)\n    if (!expires) return true;\n    if (Date.now() > Number(expires)) {\n      this.logout(); // Limpa a sessão expirada\n      return false;\n    }\n    return true;\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["throwError","BehaviorSubject","catchError","tap","Perfil","AuthService","constructor","router","http","apiUrl","currentUserRoleSubject","getUserRoleFromStorage","currentUserNameSubject","getUserNameFromStorage","currentUserRole$","asObservable","currentUserName$","login","email","senha_normal","post","pipe","response","userRole","Error","setSession","err","console","error","authResponse","localStorage","setItem","userName","expiresIn","expiresAt","Date","now","toString","next","logout","clear","navigate","getToken","getItem","getUserEmail","getUserRole","value","getUserName","isAuthenticated","token","expires","Number","i0","ɵɵinject","i1","Router","i2","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\TCC\\petflow\\petflow-web\\src\\app\\core\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, throwError, BehaviorSubject } from 'rxjs';\r\nimport { catchError, tap } from 'rxjs/operators';\r\n\r\n// Enum de perfis\r\nexport enum Perfil {\r\nADMIN = 'ADMIN',\r\nCLIENTE = 'CLIENTE'\r\n}\r\n\r\n// Interface da resposta do backend\r\nexport interface LoginResponse {\r\ntoken: string | null;\r\nexpiresIn: number | null;\r\nuserName: string | null;\r\nuserRole: Perfil | null;\r\nemail?: string | null;  // ← ADICIONAR email na resposta\r\n}\r\n\r\n@Injectable({\r\nprovidedIn: 'root'\r\n})\r\nexport class AuthService {\r\nprivate apiUrl = 'http://localhost:8081/auth';\r\n\r\n// BehaviorSubject para estado de autenticação reativo\r\nprivate currentUserRoleSubject: BehaviorSubject<Perfil | null>;\r\npublic currentUserRole$: Observable<Perfil | null>;\r\n\r\nprivate currentUserNameSubject: BehaviorSubject<string | null>;\r\npublic currentUserName$: Observable<string | null>;\r\n\r\nconstructor(private router: Router, private http: HttpClient) {\r\n        // Inicializa os BehaviorSubjects com os dados do localStorage\r\n        this.currentUserRoleSubject = new BehaviorSubject<Perfil | null>(this.getUserRoleFromStorage());\r\n        this.currentUserNameSubject = new BehaviorSubject<string | null>(this.getUserNameFromStorage());\r\n\r\n        this.currentUserRole$ = this.currentUserRoleSubject.asObservable();\r\n        this.currentUserName$ = this.currentUserNameSubject.asObservable();\r\n    }\r\n\r\n    // Método de login usando snake_case 'senha_normal' para match com o backend\r\n    login(email: string, senha_normal: string): Observable<LoginResponse> {\r\n        // Envia 'senha_normal' em snake_case\r\n        return this.http.post<LoginResponse>(`${this.apiUrl}/login`, { email, senha_normal })\r\n            .pipe(\r\n                tap(response => {\r\n                    if (!response.userRole) {\r\n                        throw new Error('Usuário ou senha inválidos');\r\n                    }\r\n                    // ← SALVA O EMAIL TAMBÉM\r\n                    this.setSession(response, email);\r\n                }),\r\n                catchError(err => {\r\n                    console.error('Erro no login', err);\r\n                    return throwError(() => new Error('Usuário ou senha inválidos'));\r\n                })\r\n            );\r\n    }\r\n\r\n    // ← MODIFICADO: Agora recebe o email como parâmetro\r\n    private setSession(authResponse: LoginResponse, email: string): void {\r\n        // ← SALVA O EMAIL COMO TOKEN (solução temporária sem JWT)\r\n        localStorage.setItem('petflow_auth_token', email);\r\n        localStorage.setItem('petflow_user_email', email);\r\n        localStorage.setItem('petflow_user_role', authResponse.userRole ?? '');\r\n        localStorage.setItem('petflow_user_name', authResponse.userName ?? '');\r\n\r\n        if (authResponse.expiresIn) {\r\n            const expiresAt = Date.now() + authResponse.expiresIn * 1000;\r\n            localStorage.setItem('petflow_token_expires', expiresAt.toString());\r\n        }\r\n\r\n        // Notifica os assinantes sobre a mudança de estado\r\n        this.currentUserRoleSubject.next(authResponse.userRole);\r\n        this.currentUserNameSubject.next(authResponse.userName);\r\n    }\r\n\r\n    logout(): void {\r\n        localStorage.clear();\r\n\r\n        // Notifica os assinantes sobre o logout\r\n        this.currentUserRoleSubject.next(null);\r\n        this.currentUserNameSubject.next(null);\r\n\r\n        this.router.navigate(['/auth/login']);\r\n    }\r\n\r\n    getToken(): string | null {\r\n        return localStorage.getItem('petflow_auth_token');\r\n    }\r\n\r\n    // ← NOVO: Método para pegar o email\r\n    getUserEmail(): string | null {\r\n        return localStorage.getItem('petflow_user_email');\r\n    }\r\n\r\n    // Renomeado para evitar confusão com o getter público\r\n    private getUserRoleFromStorage(): Perfil | null {\r\n        return localStorage.getItem('petflow_user_role') as Perfil;\r\n    }\r\n\r\n    // Renomeado para evitar confusão\r\n    private getUserNameFromStorage(): string | null {\r\n        return localStorage.getItem('petflow_user_name');\r\n    }\r\n\r\n    // Getter público para o valor atual (não reativo)\r\n    public getUserRole(): Perfil | null {\r\n        return this.currentUserRoleSubject.value;\r\n    }\r\n\r\n    // Getter público para o valor atual (não reativo)\r\n    public getUserName(): string | null {\r\n        return this.currentUserNameSubject.value;\r\n    }\r\n\r\n    isAuthenticated(): boolean {\r\n        const token = this.getToken();\r\n        const expires = localStorage.getItem('petflow_token_expires');\r\n        if (!token) return false;\r\n\r\n        // Se não houver tempo de expiração, considere válido (embora não seja ideal)\r\n        if (!expires) return true;\r\n\r\n        if (Date.now() > Number(expires)) {\r\n            this.logout(); // Limpa a sessão expirada\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}