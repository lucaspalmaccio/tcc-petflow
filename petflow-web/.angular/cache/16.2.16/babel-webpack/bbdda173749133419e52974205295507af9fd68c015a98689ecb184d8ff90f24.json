{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { tap, catchError, of } from 'rxjs';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst AUTH_TOKEN_KEY = 'petflow_auth_token';\nconst USER_ROLE_KEY = 'petflow_user_role';\nconst USER_NAME_KEY = 'petflow_user_name';\nlet AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.apiUrl = `${environment.apiUrl}/auth`;\n    }\n    /**\n     * Faz login do usuário com email e senha.\n     */\n    login(email, senha) {\n      const body = {\n        email,\n        senha\n      };\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      return this.http.post(`${this.apiUrl}/login`, body, {\n        headers\n      }).pipe(tap(response => {\n        if (response) this.setSession(response);\n      }), catchError(error => {\n        console.error('❌ Erro no login:', error.message, error.error);\n        this.clearSession();\n        return of(null);\n      }));\n    }\n    /**\n     * Armazena o token e dados do usuário no localStorage.\n     */\n    setSession(authResponse) {\n      if (!authResponse) return;\n      localStorage.setItem(AUTH_TOKEN_KEY, authResponse.token ?? '');\n      localStorage.setItem(USER_ROLE_KEY, authResponse.userRole ?? '');\n      localStorage.setItem(USER_NAME_KEY, authResponse.userName ?? '');\n    }\n    /**\n     * Faz logout limpando o localStorage e redirecionando para a tela de login.\n     */\n    logout() {\n      this.clearSession();\n      this.router.navigate(['/auth/login']);\n    }\n    clearSession() {\n      localStorage.removeItem(AUTH_TOKEN_KEY);\n      localStorage.removeItem(USER_ROLE_KEY);\n      localStorage.removeItem(USER_NAME_KEY);\n    }\n    getToken() {\n      return localStorage.getItem(AUTH_TOKEN_KEY);\n    }\n    isAuthenticated() {\n      return !!this.getToken();\n    }\n    getUserRole() {\n      return localStorage.getItem(USER_ROLE_KEY);\n    }\n    getUserName() {\n      return localStorage.getItem(USER_NAME_KEY);\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(t) {\n        return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();\nexport { AuthService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}