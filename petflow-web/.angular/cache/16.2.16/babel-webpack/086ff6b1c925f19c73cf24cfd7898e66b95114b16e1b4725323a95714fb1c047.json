{"ast":null,"code":"import { inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\n/**\n* Guarda funcional (moderno) para proteger as rotas de Admin.\n*/\nexport const adminAuthGuard = (route, state) => {\n  const authService = inject(AuthService);\n  const router = inject(Router);\n  // 1. O usuário está logado?\n  if (!authService.isAuthenticated()) {\n    // Não está logado, redireciona para o login\n    router.navigate(['/auth/login']);\n    return false;\n  }\n  // 2. O usuário é um ADMIN?\n  if (authService.getUserRole() !== 'ROLE_ADMIN') {\n    // Está logado, mas não é admin.\n    // (Em um sistema maior, redirecionaria para a área do cliente)\n    // Por enquanto, apenas o mandamos de volta para o login.\n    console.error('Acesso negado. Requer ROLE_ADMIN.');\n    authService.logout(); // Desloga o usuário\n    return false;\n  }\n  // Se passou em ambas as verificações, permite o acesso.\n  return true;\n};","map":{"version":3,"names":["inject","Router","AuthService","adminAuthGuard","route","state","authService","router","isAuthenticated","navigate","getUserRole","console","error","logout"],"sources":["C:\\TCC\\petflow\\petflow-web\\src\\app\\core\\guards\\auth.guard.ts"],"sourcesContent":["import { inject } from '@angular/core';\r\nimport { CanActivateFn, Router } from '@angular/router';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n/**\r\n* Guarda funcional (moderno) para proteger as rotas de Admin.\r\n*/\r\nexport const adminAuthGuard: CanActivateFn = (route, state) => {\r\nconst authService = inject(AuthService);\r\nconst router = inject(Router);\r\n\r\n// 1. O usuário está logado?\r\nif (!authService.isAuthenticated()) {\r\n    // Não está logado, redireciona para o login\r\n    router.navigate(['/auth/login']);\r\n    return false;\r\n  }\r\n\r\n  // 2. O usuário é um ADMIN?\r\n  if (authService.getUserRole() !== 'ROLE_ADMIN') {\r\n    // Está logado, mas não é admin.\r\n    // (Em um sistema maior, redirecionaria para a área do cliente)\r\n    // Por enquanto, apenas o mandamos de volta para o login.\r\n    console.error('Acesso negado. Requer ROLE_ADMIN.');\r\n    authService.logout(); // Desloga o usuário\r\n    return false;\r\n  }\r\n\r\n  // Se passou em ambas as verificações, permite o acesso.\r\n  return true;\r\n};"],"mappings":"AAAA,SAASA,MAAM,QAAQ,eAAe;AACtC,SAAwBC,MAAM,QAAQ,iBAAiB;AACvD,SAASC,WAAW,QAAQ,0BAA0B;AAEtD;;;AAGA,OAAO,MAAMC,cAAc,GAAkBA,CAACC,KAAK,EAAEC,KAAK,KAAI;EAC9D,MAAMC,WAAW,GAAGN,MAAM,CAACE,WAAW,CAAC;EACvC,MAAMK,MAAM,GAAGP,MAAM,CAACC,MAAM,CAAC;EAE7B;EACA,IAAI,CAACK,WAAW,CAACE,eAAe,EAAE,EAAE;IAChC;IACAD,MAAM,CAACE,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC;IAChC,OAAO,KAAK;;EAGd;EACA,IAAIH,WAAW,CAACI,WAAW,EAAE,KAAK,YAAY,EAAE;IAC9C;IACA;IACA;IACAC,OAAO,CAACC,KAAK,CAAC,mCAAmC,CAAC;IAClDN,WAAW,CAACO,MAAM,EAAE,CAAC,CAAC;IACtB,OAAO,KAAK;;EAGd;EACA,OAAO,IAAI;AACb,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}