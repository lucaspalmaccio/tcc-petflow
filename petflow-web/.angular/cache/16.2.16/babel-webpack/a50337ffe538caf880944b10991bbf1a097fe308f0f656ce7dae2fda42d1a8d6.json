{"ast":null,"code":"import { inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\n/**\n* Guarda funcional para proteger rotas baseado no login e perfil do usuário.\n* Use `data: { roles: ['ADMIN'] }` nas rotas para restringir por perfil.\n*/\nexport const authGuard = route => {\n  const authService = inject(AuthService);\n  const router = inject(Router);\n  // Verifica se está logado\n  if (!authService.isAuthenticated()) {\n    router.navigate(['/auth/login']);\n    return false;\n  }\n  // Verifica roles se definido na rota\n  const allowedRoles = route.data['roles'];\n  const userRole = authService.getUserRole();\n  if (allowedRoles && userRole && !allowedRoles.includes(userRole)) {\n    console.error('Acesso negado. Perfil não permitido.');\n    authService.logout();\n    return false;\n  }\n  return true;\n};","map":{"version":3,"names":["inject","Router","AuthService","authGuard","route","authService","router","isAuthenticated","navigate","allowedRoles","data","userRole","getUserRole","includes","console","error","logout"],"sources":["C:\\TCC\\petflow\\petflow-web\\src\\app\\core\\guards\\auth.guard.ts"],"sourcesContent":["import { inject } from '@angular/core';\r\nimport { CanActivateFn, Router, ActivatedRouteSnapshot } from '@angular/router';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n/**\r\n* Guarda funcional para proteger rotas baseado no login e perfil do usuário.\r\n* Use `data: { roles: ['ADMIN'] }` nas rotas para restringir por perfil.\r\n*/\r\nexport const authGuard: CanActivateFn = (route: ActivatedRouteSnapshot) => {\r\nconst authService = inject(AuthService);\r\nconst router = inject(Router);\r\n\r\n// Verifica se está logado\r\nif (!authService.isAuthenticated()) {\r\n    router.navigate(['/auth/login']);\r\n    return false;\r\n  }\r\n\r\n  // Verifica roles se definido na rota\r\n  const allowedRoles = route.data['roles'] as Array<'ADMIN' | 'CLIENTE'> | undefined;\r\n  const userRole = authService.getUserRole();\r\n\r\n  if (allowedRoles && userRole && !allowedRoles.includes(userRole)) {\r\n    console.error('Acesso negado. Perfil não permitido.');\r\n    authService.logout();\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n};\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,eAAe;AACtC,SAAwBC,MAAM,QAAgC,iBAAiB;AAC/E,SAASC,WAAW,QAAQ,0BAA0B;AAEtD;;;;AAIA,OAAO,MAAMC,SAAS,GAAmBC,KAA6B,IAAI;EAC1E,MAAMC,WAAW,GAAGL,MAAM,CAACE,WAAW,CAAC;EACvC,MAAMI,MAAM,GAAGN,MAAM,CAACC,MAAM,CAAC;EAE7B;EACA,IAAI,CAACI,WAAW,CAACE,eAAe,EAAE,EAAE;IAChCD,MAAM,CAACE,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC;IAChC,OAAO,KAAK;;EAGd;EACA,MAAMC,YAAY,GAAGL,KAAK,CAACM,IAAI,CAAC,OAAO,CAA2C;EAClF,MAAMC,QAAQ,GAAGN,WAAW,CAACO,WAAW,EAAE;EAE1C,IAAIH,YAAY,IAAIE,QAAQ,IAAI,CAACF,YAAY,CAACI,QAAQ,CAACF,QAAQ,CAAC,EAAE;IAChEG,OAAO,CAACC,KAAK,CAAC,sCAAsC,CAAC;IACrDV,WAAW,CAACW,MAAM,EAAE;IACpB,OAAO,KAAK;;EAGd,OAAO,IAAI;AACb,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}