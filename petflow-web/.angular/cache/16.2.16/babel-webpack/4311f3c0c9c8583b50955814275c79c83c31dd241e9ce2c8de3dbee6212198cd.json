{"ast":null,"code":"import { tap, catchError, of } from 'rxjs';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\n// Chaves para o localStorage\nconst AUTH_TOKEN_KEY = 'petflow_auth_token';\nconst USER_ROLE_KEY = 'petflow_user_role';\nconst USER_NAME_KEY = 'petflow_user_name';\nclass AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.apiUrl = `${environment.apiUrl}/auth`;\n  }\n  /**\n   * UC01 - Autenticar Usuário\n   * Chama a API de login e armazena o token se for bem-sucedido.\n   */\n  login(email, senha) {\n    return this.http.post(`${this.apiUrl}/login`, {\n      email,\n      senha\n    }).pipe(tap(response => this.setSession(response)), catchError(error => {\n      console.error(\"Erro no login:\", error);\n      this.clearSession(); // Garante que qualquer sessão antiga seja limpa\n      return of(null); // Retorna um observable nulo em caso de erro\n    }));\n  }\n  /**\n   * Salva os dados da sessão no localStorage.\n   */\n  setSession(authResponse) {\n    localStorage.setItem(AUTH_TOKEN_KEY, authResponse.token);\n    localStorage.setItem(USER_ROLE_KEY, authResponse.userRole);\n    localStorage.setItem(USER_NAME_KEY, authResponse.userName);\n  }\n  /**\n   * Limpa a sessão do localStorage e redireciona para o login.\n   */\n  logout() {\n    this.clearSession();\n    this.router.navigate(['/auth/login']);\n  }\n  clearSession() {\n    localStorage.removeItem(AUTH_TOKEN_KEY);\n    localStorage.removeItem(USER_ROLE_KEY);\n    localStorage.removeItem(USER_NAME_KEY);\n  }\n  // --- Métodos utilitários ---\n  /**\n   * Retorna o token JWT armazenado.\n   */\n  getToken() {\n    return localStorage.getItem(AUTH_TOKEN_KEY);\n  }\n  /**\n   * Verifica se o usuário está autenticado (possui um token).\n   */\n  isAuthenticated() {\n    return !!this.getToken();\n  }\n  /**\n   * Retorna o perfil (ROLE) do usuário logado.\n   */\n  getUserRole() {\n    return localStorage.getItem(USER_ROLE_KEY);\n  }\n  /**\n   * Retorna o nome do usuário logado.\n   */\n  getUserName() {\n    return localStorage.getItem(USER_NAME_KEY);\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root' // Disponível globalmente\n    });\n  }\n}\nexport { AuthService };","map":{"version":3,"names":["tap","catchError","of","environment","AUTH_TOKEN_KEY","USER_ROLE_KEY","USER_NAME_KEY","AuthService","constructor","http","router","apiUrl","login","email","senha","post","pipe","response","setSession","error","console","clearSession","authResponse","localStorage","setItem","token","userRole","userName","logout","navigate","removeItem","getToken","getItem","isAuthenticated","getUserRole","getUserName","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\TCC\\petflow\\petflow-web\\src\\app\\core\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\nimport { Observable, tap, catchError, of } from 'rxjs';\r\nimport { environment } from '../../../environments/environment';\r\nimport { LoginResponse } from '../models/auth.models';\r\n\r\n// Chaves para o localStorage\r\nconst AUTH_TOKEN_KEY = 'petflow_auth_token';\r\nconst USER_ROLE_KEY = 'petflow_user_role';\r\nconst USER_NAME_KEY = 'petflow_user_name';\r\n\r\n@Injectable({\r\nprovidedIn: 'root' // Disponível globalmente\r\n})\r\nexport class AuthService {\r\n\r\nprivate apiUrl = `${environment.apiUrl}/auth`;\r\n\r\nconstructor(\r\n    private http: HttpClient,\r\n    private router: Router\r\n  ) { }\r\n\r\n  /**\r\n   * UC01 - Autenticar Usuário\r\n   * Chama a API de login e armazena o token se for bem-sucedido.\r\n   */\r\n  login(email: string, senha: string): Observable<LoginResponse | null> {\r\n    return this.http.post<LoginResponse>(`${this.apiUrl}/login`, { email, senha })\r\n      .pipe(\r\n        tap((response) => this.setSession(response)),\r\n        catchError((error) => {\r\n          console.error(\"Erro no login:\", error);\r\n          this.clearSession(); // Garante que qualquer sessão antiga seja limpa\r\n          return of(null); // Retorna um observable nulo em caso de erro\r\n        })\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Salva os dados da sessão no localStorage.\r\n   */\r\n  private setSession(authResponse: LoginResponse): void {\r\n    localStorage.setItem(AUTH_TOKEN_KEY, authResponse.token);\r\n    localStorage.setItem(USER_ROLE_KEY, authResponse.userRole);\r\n    localStorage.setItem(USER_NAME_KEY, authResponse.userName);\r\n  }\r\n\r\n  /**\r\n   * Limpa a sessão do localStorage e redireciona para o login.\r\n   */\r\n  logout(): void {\r\n    this.clearSession();\r\n    this.router.navigate(['/auth/login']);\r\n  }\r\n\r\n  private clearSession(): void {\r\n    localStorage.removeItem(AUTH_TOKEN_KEY);\r\n    localStorage.removeItem(USER_ROLE_KEY);\r\n    localStorage.removeItem(USER_NAME_KEY);\r\n  }\r\n\r\n  // --- Métodos utilitários ---\r\n\r\n  /**\r\n   * Retorna o token JWT armazenado.\r\n   */\r\n  getToken(): string | null {\r\n    return localStorage.getItem(AUTH_TOKEN_KEY);\r\n  }\r\n\r\n  /**\r\n   * Verifica se o usuário está autenticado (possui um token).\r\n   */\r\n  isAuthenticated(): boolean {\r\n    return !!this.getToken();\r\n  }\r\n\r\n  /**\r\n   * Retorna o perfil (ROLE) do usuário logado.\r\n   */\r\n  getUserRole(): string | null {\r\n    return localStorage.getItem(USER_ROLE_KEY);\r\n  }\r\n\r\n  /**\r\n   * Retorna o nome do usuário logado.\r\n   */\r\n  getUserName(): string | null {\r\n    return localStorage.getItem(USER_NAME_KEY);\r\n  }\r\n}"],"mappings":"AAGA,SAAqBA,GAAG,EAAEC,UAAU,EAAEC,EAAE,QAAQ,MAAM;AACtD,SAASC,WAAW,QAAQ,mCAAmC;;;;AAG/D;AACA,MAAMC,cAAc,GAAG,oBAAoB;AAC3C,MAAMC,aAAa,GAAG,mBAAmB;AACzC,MAAMC,aAAa,GAAG,mBAAmB;AAEzC,MAGaC,WAAW;EAIxBC,YACYC,IAAgB,EAChBC,MAAc;IADd,KAAAD,IAAI,GAAJA,IAAI;IACJ,KAAAC,MAAM,GAANA,MAAM;IAJV,KAAAC,MAAM,GAAG,GAAGR,WAAW,CAACQ,MAAM,OAAO;EAKvC;EAEJ;;;;EAIAC,KAAKA,CAACC,KAAa,EAAEC,KAAa;IAChC,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAgB,GAAG,IAAI,CAACJ,MAAM,QAAQ,EAAE;MAAEE,KAAK;MAAEC;IAAK,CAAE,CAAC,CAC3EE,IAAI,CACHhB,GAAG,CAAEiB,QAAQ,IAAK,IAAI,CAACC,UAAU,CAACD,QAAQ,CAAC,CAAC,EAC5ChB,UAAU,CAAEkB,KAAK,IAAI;MACnBC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;MACtC,IAAI,CAACE,YAAY,EAAE,CAAC,CAAC;MACrB,OAAOnB,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,CAAC,CAAC,CACH;EACL;EAEA;;;EAGQgB,UAAUA,CAACI,YAA2B;IAC5CC,YAAY,CAACC,OAAO,CAACpB,cAAc,EAAEkB,YAAY,CAACG,KAAK,CAAC;IACxDF,YAAY,CAACC,OAAO,CAACnB,aAAa,EAAEiB,YAAY,CAACI,QAAQ,CAAC;IAC1DH,YAAY,CAACC,OAAO,CAAClB,aAAa,EAAEgB,YAAY,CAACK,QAAQ,CAAC;EAC5D;EAEA;;;EAGAC,MAAMA,CAAA;IACJ,IAAI,CAACP,YAAY,EAAE;IACnB,IAAI,CAACX,MAAM,CAACmB,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC;EACvC;EAEQR,YAAYA,CAAA;IAClBE,YAAY,CAACO,UAAU,CAAC1B,cAAc,CAAC;IACvCmB,YAAY,CAACO,UAAU,CAACzB,aAAa,CAAC;IACtCkB,YAAY,CAACO,UAAU,CAACxB,aAAa,CAAC;EACxC;EAEA;EAEA;;;EAGAyB,QAAQA,CAAA;IACN,OAAOR,YAAY,CAACS,OAAO,CAAC5B,cAAc,CAAC;EAC7C;EAEA;;;EAGA6B,eAAeA,CAAA;IACb,OAAO,CAAC,CAAC,IAAI,CAACF,QAAQ,EAAE;EAC1B;EAEA;;;EAGAG,WAAWA,CAAA;IACT,OAAOX,YAAY,CAACS,OAAO,CAAC3B,aAAa,CAAC;EAC5C;EAEA;;;EAGA8B,WAAWA,CAAA;IACT,OAAOZ,YAAY,CAACS,OAAO,CAAC1B,aAAa,CAAC;EAC5C;;;uBA5EWC,WAAW,EAAA6B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAAXlC,WAAW;MAAAmC,OAAA,EAAXnC,WAAW,CAAAoC,IAAA;MAAAC,UAAA,EAFZ,MAAM,CAAC;;;;SAENrC,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}