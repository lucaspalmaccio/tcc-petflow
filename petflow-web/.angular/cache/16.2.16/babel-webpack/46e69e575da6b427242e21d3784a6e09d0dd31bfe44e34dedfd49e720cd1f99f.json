{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { BehaviorSubject, switchMap, catchError, of } from 'rxjs';\nlet MeusAgendamentosComponent = class MeusAgendamentosComponent {\n  constructor(agendamentoService, petService,\n  // Para buscar os pets do cliente\n  servicoService // Para buscar os serviços disponíveis\n  ) {\n    this.agendamentoService = agendamentoService;\n    this.petService = petService;\n    this.servicoService = servicoService;\n    this.isLoadingAgendamentos = true;\n    this.errorAgendamentos = null;\n    this.refreshAgendamentos = new BehaviorSubject(undefined); // Para recarregar a lista\n    this.isLoadingModalData = false;\n    // Estado do Modal\n    this.isModalOpen = false;\n  }\n  ngOnInit() {\n    // Carrega a lista de agendamentos e reage a atualizações\n    this.agendamentos$ = this.refreshAgendamentos.pipe(switchMap(() => {\n      this.isLoadingAgendamentos = true;\n      this.errorAgendamentos = null;\n      return this.agendamentoService.getAgendamentos().pipe(catchError(err => {\n        this.isLoadingAgendamentos = false;\n        this.errorAgendamentos = \"Falha ao carregar seus agendamentos.\";\n        console.error(err);\n        return of([]); // Retorna array vazio em caso de erro\n      }));\n    }), tap(() => this.isLoadingAgendamentos = false) // Desativa o loading após sucesso\n    );\n    // Carrega dados necessários para o modal (executa apenas uma vez)\n    this.loadModalData();\n  }\n  /**\n   * UC05 - Carrega a lista de agendamentos do cliente logado.\n   */\n  loadAgendamentos() {\n    this.refreshAgendamentos.next(); // Dispara o observable para recarregar\n  }\n  /**\n   * Carrega os dados necessários para o modal de novo agendamento\n   * (pets do cliente e serviços disponíveis).\n   */\n  loadModalData() {\n    this.isLoadingModalData = true;\n    // Busca os pets do cliente logado\n    this.petsCliente$ = this.petService.getMeusPets().pipe(catchError(err => {\n      console.error(\"Erro ao buscar pets:\", err);\n      return of([]);\n    }));\n    // Busca todos os serviços (o cliente selecionará quais quer)\n    this.servicosDisponiveis$ = this.servicoService.getAllServicos().pipe(catchError(err => {\n      console.error(\"Erro ao buscar serviços:\", err);\n      return of([]);\n    }));\n    // Simplificação: Assume que ambos carregam rapidamente.\n    // Em um cenário real, poderia usar forkJoin para esperar ambos.\n    this.petsCliente$.subscribe(() => {}); // Apenas para iniciar\n    this.servicosDisponiveis$.subscribe(() => this.isLoadingModalData = false); // Termina o loading\n  }\n  /**\n   * CT03.4 - Cancelar Agendamento\n   */\n  onCancel(id, data) {\n    // Usar a data formatada pode ser melhor\n    const dataFormatada = new Date(data).toLocaleDateString('pt-BR', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n    if (confirm(`Tem certeza que deseja cancelar o agendamento do dia ${dataFormatada}?`)) {\n      this.agendamentoService.cancelarAgendamento(id).subscribe({\n        next: () => {\n          this.loadAgendamentos(); // Recarrega a lista\n        },\n        error: err => {\n          alert(\"Erro ao cancelar agendamento: \" + (err.error?.erro || err.message));\n        }\n      });\n    }\n  }\n  /**\n   * UC05 - (Fluxo 1) Inicia o fluxo de \"Novo Agendamento\"\n   */\n  openAgendamentoModal() {\n    // Recarrega os dados caso algo tenha mudado (ex: admin cadastrou novo pet)\n    this.loadModalData();\n    this.isModalOpen = true;\n  }\n  closeAgendamentoModal() {\n    this.isModalOpen = false;\n  }\n  /**\n   * Chamado quando o modal de agendamento emite 'saveSuccess'.\n   */\n  handleSaveSuccess() {\n    this.isModalOpen = false;\n    this.loadAgendamentos(); // Recarrega a lista após novo agendamento\n  }\n  // Helper para formatar data no template\n  formatDate(dateString) {\n    return new Date(dateString).toLocaleDateString('pt-BR', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  }\n};\nMeusAgendamentosComponent = __decorate([Component({\n  selector: 'app-meus-agendamentos',\n  templateUrl: './meus-agendamentos.component.html',\n  styleUrls: ['./meus-agendamentos.component.css']\n})], MeusAgendamentosComponent);\nexport { MeusAgendamentosComponent };","map":{"version":3,"names":["Component","BehaviorSubject","switchMap","catchError","of","MeusAgendamentosComponent","constructor","agendamentoService","petService","servicoService","isLoadingAgendamentos","errorAgendamentos","refreshAgendamentos","undefined","isLoadingModalData","isModalOpen","ngOnInit","agendamentos$","pipe","getAgendamentos","err","console","error","tap","loadModalData","loadAgendamentos","next","petsCliente$","getMeusPets","servicosDisponiveis$","getAllServicos","subscribe","onCancel","id","data","dataFormatada","Date","toLocaleDateString","day","month","year","hour","minute","confirm","cancelarAgendamento","alert","erro","message","openAgendamentoModal","closeAgendamentoModal","handleSaveSuccess","formatDate","dateString","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\TCC\\petflow\\petflow-web\\src\\app\\features\\cliente\\pages\\meus-agendamentos\\meus-agendamentos.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Observable, BehaviorSubject, switchMap, catchError, of } from 'rxjs';\r\nimport { AgendamentoService } from '../../../admin/services/agendamento.service';\r\nimport { AgendamentoResponse } from '../../../admin/models/agendamento.model';\r\nimport { PetService } from '../../../admin/services/pet.service';\r\nimport { ServicoService } from '../../../admin/services/servico.service';\r\nimport { Pet } from '../../../admin/models/pet.model';\r\nimport { Servico } from '../../../admin/models/servico.model';\r\n\r\n@Component({\r\nselector: 'app-meus-agendamentos',\r\ntemplateUrl: './meus-agendamentos.component.html',\r\nstyleUrls: ['./meus-agendamentos.component.css']\r\n})\r\nexport class MeusAgendamentosComponent implements OnInit {\r\n\r\n// Agendamentos existentes\r\npublic agendamentos$: Observable<AgendamentoResponse[]>;\r\npublic isLoadingAgendamentos = true;\r\npublic errorAgendamentos: string | null = null;\r\nprivate refreshAgendamentos = new BehaviorSubject<void>(undefined); // Para recarregar a lista\r\n\r\n// Dados para o modal\r\npublic petsCliente$: Observable<Pet[]>;\r\npublic servicosDisponiveis$: Observable<Servico[]>;\r\npublic isLoadingModalData = false;\r\n\r\n// Estado do Modal\r\npublic isModalOpen = false;\r\n\r\nconstructor(\r\n    private agendamentoService: AgendamentoService,\r\n    private petService: PetService, // Para buscar os pets do cliente\r\n    private servicoService: ServicoService // Para buscar os serviços disponíveis\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    // Carrega a lista de agendamentos e reage a atualizações\r\n    this.agendamentos$ = this.refreshAgendamentos.pipe(\r\n      switchMap(() => {\r\n        this.isLoadingAgendamentos = true;\r\n        this.errorAgendamentos = null;\r\n        return this.agendamentoService.getAgendamentos().pipe(\r\n          catchError((err) => {\r\n            this.isLoadingAgendamentos = false;\r\n            this.errorAgendamentos = \"Falha ao carregar seus agendamentos.\";\r\n            console.error(err);\r\n            return of([]); // Retorna array vazio em caso de erro\r\n          })\r\n        );\r\n      }),\r\n      tap(() => this.isLoadingAgendamentos = false) // Desativa o loading após sucesso\r\n    );\r\n\r\n    // Carrega dados necessários para o modal (executa apenas uma vez)\r\n    this.loadModalData();\r\n  }\r\n\r\n  /**\r\n   * UC05 - Carrega a lista de agendamentos do cliente logado.\r\n   */\r\n  loadAgendamentos(): void {\r\n    this.refreshAgendamentos.next(); // Dispara o observable para recarregar\r\n  }\r\n\r\n  /**\r\n   * Carrega os dados necessários para o modal de novo agendamento\r\n   * (pets do cliente e serviços disponíveis).\r\n   */\r\n  loadModalData(): void {\r\n    this.isLoadingModalData = true;\r\n    // Busca os pets do cliente logado\r\n    this.petsCliente$ = this.petService.getMeusPets().pipe(\r\n      catchError(err => {\r\n        console.error(\"Erro ao buscar pets:\", err);\r\n        return of([]);\r\n      })\r\n    );\r\n    // Busca todos os serviços (o cliente selecionará quais quer)\r\n    this.servicosDisponiveis$ = this.servicoService.getAllServicos().pipe(\r\n      catchError(err => {\r\n        console.error(\"Erro ao buscar serviços:\", err);\r\n        return of([]);\r\n      })\r\n    );\r\n\r\n    // Simplificação: Assume que ambos carregam rapidamente.\r\n    // Em um cenário real, poderia usar forkJoin para esperar ambos.\r\n    this.petsCliente$.subscribe(() => {}); // Apenas para iniciar\r\n    this.servicosDisponiveis$.subscribe(() => this.isLoadingModalData = false); // Termina o loading\r\n  }\r\n\r\n  /**\r\n   * CT03.4 - Cancelar Agendamento\r\n   */\r\n  onCancel(id: number, data: string): void {\r\n    // Usar a data formatada pode ser melhor\r\n    const dataFormatada = new Date(data).toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit'});\r\n    if (confirm(`Tem certeza que deseja cancelar o agendamento do dia ${dataFormatada}?`)) {\r\n      this.agendamentoService.cancelarAgendamento(id).subscribe({\r\n        next: () => {\r\n          this.loadAgendamentos(); // Recarrega a lista\r\n        },\r\n        error: (err) => {\r\n          alert(\"Erro ao cancelar agendamento: \" + (err.error?.erro || err.message));\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * UC05 - (Fluxo 1) Inicia o fluxo de \"Novo Agendamento\"\r\n   */\r\n  openAgendamentoModal(): void {\r\n    // Recarrega os dados caso algo tenha mudado (ex: admin cadastrou novo pet)\r\n    this.loadModalData();\r\n    this.isModalOpen = true;\r\n  }\r\n\r\n  closeAgendamentoModal(): void {\r\n    this.isModalOpen = false;\r\n  }\r\n\r\n  /**\r\n   * Chamado quando o modal de agendamento emite 'saveSuccess'.\r\n   */\r\n  handleSaveSuccess(): void {\r\n    this.isModalOpen = false;\r\n    this.loadAgendamentos(); // Recarrega a lista após novo agendamento\r\n  }\r\n\r\n  // Helper para formatar data no template\r\n  formatDate(dateString: string): string {\r\n     return new Date(dateString).toLocaleDateString('pt-BR', {day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit'});\r\n  }\r\n}\r\n\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAqBC,eAAe,EAAEC,SAAS,EAAEC,UAAU,EAAEC,EAAE,QAAQ,MAAM;AAa7E,IAAaC,yBAAyB,GAAtC,MAAaA,yBAAyB;EAgBtCC,YACYC,kBAAsC,EACtCC,UAAsB;EAAE;EACxBC,cAA8B,CAAC;EAAA,E;IAF/B,KAAAF,kBAAkB,GAAlBA,kBAAkB;IAClB,KAAAC,UAAU,GAAVA,UAAU;IACV,KAAAC,cAAc,GAAdA,cAAc;IAfnB,KAAAC,qBAAqB,GAAG,IAAI;IAC5B,KAAAC,iBAAiB,GAAkB,IAAI;IACtC,KAAAC,mBAAmB,GAAG,IAAIX,eAAe,CAAOY,SAAS,CAAC,CAAC,CAAC;IAK7D,KAAAC,kBAAkB,GAAG,KAAK;IAEjC;IACO,KAAAC,WAAW,GAAG,KAAK;EAMpB;EAEJC,QAAQA,CAAA;IACN;IACA,IAAI,CAACC,aAAa,GAAG,IAAI,CAACL,mBAAmB,CAACM,IAAI,CAChDhB,SAAS,CAAC,MAAK;MACb,IAAI,CAACQ,qBAAqB,GAAG,IAAI;MACjC,IAAI,CAACC,iBAAiB,GAAG,IAAI;MAC7B,OAAO,IAAI,CAACJ,kBAAkB,CAACY,eAAe,EAAE,CAACD,IAAI,CACnDf,UAAU,CAAEiB,GAAG,IAAI;QACjB,IAAI,CAACV,qBAAqB,GAAG,KAAK;QAClC,IAAI,CAACC,iBAAiB,GAAG,sCAAsC;QAC/DU,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;QAClB,OAAOhB,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;MACjB,CAAC,CAAC,CACH;IACH,CAAC,CAAC,EACFmB,GAAG,CAAC,MAAM,IAAI,CAACb,qBAAqB,GAAG,KAAK,CAAC,CAAC;KAC/C;IAED;IACA,IAAI,CAACc,aAAa,EAAE;EACtB;EAEA;;;EAGAC,gBAAgBA,CAAA;IACd,IAAI,CAACb,mBAAmB,CAACc,IAAI,EAAE,CAAC,CAAC;EACnC;EAEA;;;;EAIAF,aAAaA,CAAA;IACX,IAAI,CAACV,kBAAkB,GAAG,IAAI;IAC9B;IACA,IAAI,CAACa,YAAY,GAAG,IAAI,CAACnB,UAAU,CAACoB,WAAW,EAAE,CAACV,IAAI,CACpDf,UAAU,CAACiB,GAAG,IAAG;MACfC,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEF,GAAG,CAAC;MAC1C,OAAOhB,EAAE,CAAC,EAAE,CAAC;IACf,CAAC,CAAC,CACH;IACD;IACA,IAAI,CAACyB,oBAAoB,GAAG,IAAI,CAACpB,cAAc,CAACqB,cAAc,EAAE,CAACZ,IAAI,CACnEf,UAAU,CAACiB,GAAG,IAAG;MACfC,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEF,GAAG,CAAC;MAC9C,OAAOhB,EAAE,CAAC,EAAE,CAAC;IACf,CAAC,CAAC,CACH;IAED;IACA;IACA,IAAI,CAACuB,YAAY,CAACI,SAAS,CAAC,MAAK,CAAE,CAAC,CAAC,CAAC,CAAC;IACvC,IAAI,CAACF,oBAAoB,CAACE,SAAS,CAAC,MAAM,IAAI,CAACjB,kBAAkB,GAAG,KAAK,CAAC,CAAC,CAAC;EAC9E;EAEA;;;EAGAkB,QAAQA,CAACC,EAAU,EAAEC,IAAY;IAC/B;IACA,MAAMC,aAAa,GAAG,IAAIC,IAAI,CAACF,IAAI,CAAC,CAACG,kBAAkB,CAAC,OAAO,EAAE;MAAEC,GAAG,EAAE,SAAS;MAAEC,KAAK,EAAE,SAAS;MAAEC,IAAI,EAAE,SAAS;MAAEC,IAAI,EAAE,SAAS;MAAEC,MAAM,EAAE;IAAS,CAAC,CAAC;IAC1J,IAAIC,OAAO,CAAC,wDAAwDR,aAAa,GAAG,CAAC,EAAE;MACrF,IAAI,CAAC5B,kBAAkB,CAACqC,mBAAmB,CAACX,EAAE,CAAC,CAACF,SAAS,CAAC;QACxDL,IAAI,EAAEA,CAAA,KAAK;UACT,IAAI,CAACD,gBAAgB,EAAE,CAAC,CAAC;QAC3B,CAAC;QACDH,KAAK,EAAGF,GAAG,IAAI;UACbyB,KAAK,CAAC,gCAAgC,IAAIzB,GAAG,CAACE,KAAK,EAAEwB,IAAI,IAAI1B,GAAG,CAAC2B,OAAO,CAAC,CAAC;QAC5E;OACD,CAAC;;EAEN;EAEA;;;EAGAC,oBAAoBA,CAAA;IAClB;IACA,IAAI,CAACxB,aAAa,EAAE;IACpB,IAAI,CAACT,WAAW,GAAG,IAAI;EACzB;EAEAkC,qBAAqBA,CAAA;IACnB,IAAI,CAAClC,WAAW,GAAG,KAAK;EAC1B;EAEA;;;EAGAmC,iBAAiBA,CAAA;IACf,IAAI,CAACnC,WAAW,GAAG,KAAK;IACxB,IAAI,CAACU,gBAAgB,EAAE,CAAC,CAAC;EAC3B;EAEA;EACA0B,UAAUA,CAACC,UAAkB;IAC1B,OAAO,IAAIhB,IAAI,CAACgB,UAAU,CAAC,CAACf,kBAAkB,CAAC,OAAO,EAAE;MAACC,GAAG,EAAE,SAAS;MAAEC,KAAK,EAAE,SAAS;MAAEC,IAAI,EAAE,SAAS;MAAEC,IAAI,EAAE,SAAS;MAAEC,MAAM,EAAE;IAAS,CAAC,CAAC;EACnJ;CACD;AAzHYrC,yBAAyB,GAAAgD,UAAA,EALrCrD,SAAS,CAAC;EACXsD,QAAQ,EAAE,uBAAuB;EACjCC,WAAW,EAAE,oCAAoC;EACjDC,SAAS,EAAE,CAAC,mCAAmC;CAC9C,CAAC,C,EACWnD,yBAAyB,CAyHrC;SAzHYA,yBAAyB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}